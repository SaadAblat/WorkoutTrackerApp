@page "/ManageWorkouts"
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
<PageTitle>AddWorkout</PageTitle>
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@layout UserLayout
<img class="background" src="Images/Background.png">


<div class="container bg-white text-dark m-auto p-0 rounded-3 AddWorkoutContainer ">
    <div  >
        <div class="m-auto text-center">
            <div class="bg-dark rounded mb-4">
                <h1 class="text-light text-center fs-1 p-3" >Add a new workout</h1>
            </div>
            <div class=" p-2 w-100 ">
                <label style="max-height:42px;" class=" bg-dark text-light rounded fs-3 text-center w-75 fw-bold mb-3">Set workout's date</label>
                <input style="max-width:400px;" type="date" class="form-control form-control-sm border-3 m-auto text-center fs-4  " id="WorkoutDate" @bind-value="Workout.Date" />
                
                
                <hr />
                
                <h1 style="max-height:42px;" class="p-1 bg-dark rounded text-light fs-3 text-center m-auto w-75 fw-bold mb-3">Workout Rounds</h1>
                @if (Workout.Rounds != null)
                {
                    @foreach (Models.RoundModel round in Workout.Rounds)
                    {
                        <div class="m-auto border-3 border border-dark rounded-3 mb-3 p-3" style="max-width:600px;">
                            <span @onclick="@(() => DeleteRound(round))" class="closeX oi oi-x w-100 text-end "></span>

                            <div>
                                <label for="RoundExercice" class="text-start fs-3"> @round.RoundNumber - @round.ExerciseName</label>
                                <span>
                                    <select class="dropdown bg-dark text-light rounded ms-2" style="max-width:20px;min-height:20px; transform:translateY(-3px)" id="RoundExercice" @bind="round.ExerciseName">
                                        <option class="dropdown-header"></option>
                                        @foreach (Models.ExerciseModel exercice in _exercises.OrderBy(x => x.Name))
                                        {
                                            <option value="@exercice.Name">@exercice.Name</option>
                                        }
                                    </select>
                                </span>
                            </div>
                                
                            <div>
                                <Animation  AnimationNameSelect="@AnimationsNames.fadeDown">

                                <table class="table table-secondary rounded  ">
                                    <thead>
                                        <tr>
                                            <th class="fs-5" style="min-width:50px;" scope="col">Set</th>
                                            <th class="fs-5" style="min-width:50px;" scope="col">Weight</th>
                                            <th class="fs-5" style="min-width:50px;" scope="col">Reps</th>
                                            
                                        </tr>
                                    </thead>
                                    <tbody>
                                        
                                        
                                        @if (round.Sets != null)
                                        {
                                            foreach (Models.SetModel set in round.Sets)
                                            {
                                                

                                                <tr>
                                                    <th class="fs-5" scope="row"><span @onclick="@(() => DeleteSet(round, set))" class="oi oi-x me-3 deleteOi"></span>@set.SetNumber</th>
                                                    <td class="fs-5"><input  type="number" min="0" id="SetWeight" class="text-center m-auto rounded " style="max-width:80px;" @bind-value="set.Weight" /> Kg</td>
                                                    <td class="fs-5"><input type="number" min="1" id="SetReps" class="text-center m-auto rounded" style="max-width:80px;" @bind-value="set.Reps" /> Rep</td>
                                                    

                                                </tr>
                                            }
                                        }
                                        <tr>
                                            <th @onclick="@(() => AddSet(round))" colspan="4" class="w-100 addSet">
                                                <span class="oi oi-plus  me-3 text-center "></span>
                                            </th>
                                        </tr>
                                    </tbody>
                                </table>
                                </Animation>
                            </div>
                        </div>
                    }
                }
                <div>
                    <button class="btn btn-success m-3 fs-3" @onclick="AddRound">Add a new round</button>
                </div>

                <h1 style="max-height:42px;" class="p-1 bg-dark rounded text-light fs-3 text-center m-auto w-75 fw-bold mb-3">Workout Note</h1>
                <div class="m-auto border-3 border border-dark rounded-3 mb-3 p-3" style="max-width:600px;">
                    <textarea placeholder="Add a Note" class=" form-control " @bind="Workout.Note" />
                </div>
                <div>

                        <p class="validation-message shake">@_validationErrorMessage</p>

                    <p class="text-success m-1 fs-4">@_workoutAdded</p>
                    <button class="btn btn-success m-3 fs-2" type="submit" @onclick="(()=>AddWorkoutAsync(_userId))"> SAVE WORKOUT</button>
                </div>
            </div>

            
        </div>

    </div>

    
</div>



<div class="mt-5 container bg-white text-dark m-auto w-100 p-0 rounded-3 mb-4 " style="max-width:800px; border:solid white">
    <h1 class="bg-dark text-light text-center fs-1 p-3">Manage Workouts</h1>
    <div class="p-4">
        <table class="table table-danger table-bordered">
            <thead>
                <tr>
                    <th class="fs-4">Date</th>
                    <th class="fs-4">Exercises</th>
                    <th class="fs-4">Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var wrk in _workouts.OrderBy(x => x.Date))
                {
                    <tr>
                        <td class="fw-bold">@wrk.Date.ToShortDateString()</td>
                        <td>
                            @foreach (var round in wrk.Rounds)
                            {
                                if (round.RoundNumber == wrk.Rounds.Count)
                                {
                                    <span> @round.ExerciseName.</span>

                                }
                                else
                                {
                                    <span> @round.ExerciseName,  </span>

                                }
                            }
                        </td>
                        <td class="p-1" style="cursor:pointer;" @onclick="@(() =>DeleteWorkout(wrk.Id))"><button class="btn btn-danger text-center w-100  ">Delete Workout</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
</div>






    

@code {

        WorkoutModel Workout = new();
        List<WorkoutModel> _workouts = new();
        int setN = 0;



        ExerciseModel Exercise = new();
        List<ExerciseModel> _exercises = new();


        List<ExerciseInfos> _exercisesInfo = new();

        string _userName="";
        string _userId="";





    protected override async Task OnInitializedAsync()
    {

        Workout.Date = DateTime.Now;
        AddRound();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        _userName = user.Identity.Name;
        _userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _workouts = await repo.GetWorkoutsByUserIdAsync(_userId);
            _exercises = await repo.GetAllExercisesAsync();
        }
        _exercisesInfo = ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _workouts);

    }







    async Task DeleteWorkout(Guid id)
    {
        if (_workouts.Any(w => w.Id == id))
        {
            _workouts.Remove(_workouts.First(w => w.Id == id));
        }
        SuccessMessage("Deleting");
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.DeleteWorkoutAsync(id);
            SuccessMessage("Deleted successfuly");

            await repo.AddLogMessageAsync(GenerateLogMessage($"{_userName} deleted a workout!", Workout, "red"));
        }


    } 

    private void AddRound()
    {
        Models.RoundModel round = new();
        if (Workout.Rounds == null)
        {
            Workout.Rounds = new List<Models.RoundModel>();
        }
        round.RoundNumber = Workout.Rounds.Count + 1;
        Workout.Rounds.Add(round);
        AddSet(round);

    }

    private void DeleteRound(Models.RoundModel round)
    {
        if (Workout.Rounds != null)
        {
            Workout.Rounds.Remove(round);
        }
        // Reset rounds Numbers
        if (Workout.Rounds != null)
        {
            // Reset rounds Numbers
            int i = 1;
            foreach (var r in Workout.Rounds)
            {
                r.RoundNumber = i;
                i++;
            }
        }

    }

    private void AddSet(Models.RoundModel round)
    {
        Models.SetModel set = new();
        if (round.Sets == null)
        {
            round.Sets = new List<Models.SetModel>();
            set.SetNumber = 1;
        }
        else
        {
            set.SetNumber = round.Sets.Count+1;

        }
        set.Reps = 1;
        round.Sets.Add(set);
    }

    private void DeleteSet(Models.RoundModel round, Models.SetModel set)
    {
        if (round.Sets != null)
        {
            round.Sets.Remove(set);
            for (int i = 0; i < round.Sets.Count; i++)
            {
                round.Sets[i].SetNumber = i + 1;
            }
        }
    }


    string _validationErrorMessage = "";
    void DisplayErrorMessage(string message)
    {

        _validationErrorMessage = message;
    }
    string _workoutAdded = "";
    void SuccessMessage(string message)
    {
        _workoutAdded = message;
    }
    private async Task AddWorkoutAsync(string userId)
    {
        if (Workout.Rounds == null)
        {
            DisplayErrorMessage("Workout has no round!");
            return;
        }
        foreach(var round in Workout.Rounds)
        {
            if (string.IsNullOrEmpty(round.ExerciseName))
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no Exercise selected!");
                return;
            }
            if (round.Sets == null || round.Sets.Count == 0)
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no sets!");
                return;
            }
        }
        DisplayErrorMessage("");
        SuccessMessage("Adding");
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.AddWorkout(Workout, userId);
            await repo.UpdateUserAchievementAsync(userId, _userName);
            await repo.AddLogMessageAsync(GenerateLogMessage($"{_userName} added a Workout!", Workout, "yellow"));
            foreach (var round in Workout.Rounds)
            {
                decimal thisRoundMaxWeight = round.Sets.MaxBy(x => x.Weight).Weight;
                int thisRoundMaxWeightReps = round.Sets.Where(x => x.Weight == thisRoundMaxWeight).MaxBy(x => x.Reps).Reps;

                decimal maxWeightForRoundExercise = ExerciseInfoLogic.GetExerciseMaxWeightLifted(round.ExerciseName, _workouts);
                int maxWeightRepsForRoundExercise = ExerciseInfoLogic.GetExerciseMaxWeightReps(round.ExerciseName, maxWeightForRoundExercise, _workouts);


                if (thisRoundMaxWeight > maxWeightForRoundExercise)
                {
                    string msg = $"Congratulations {_userName}! You beat your previous record in the {round.ExerciseName} exercise! your new record is {thisRoundMaxWeight} Kg x {thisRoundMaxWeightReps}";
                    await repo.AddLogMessageAsync(GenerateLogMessage(msg, Workout, "greenyellow"));
                }
                else if (thisRoundMaxWeight == maxWeightForRoundExercise)
                {
                    if (thisRoundMaxWeightReps > maxWeightRepsForRoundExercise)
                    {
                        string msg = $"Congratulations {_userName}! You beat your previous record in the {round.ExerciseName} exercise! You did {thisRoundMaxWeightReps} more reps than your best";
                        await repo.AddLogMessageAsync(GenerateLogMessage(msg, Workout, "greenyellow"));
                    }
                }
            }
            _workouts.Add(Workout);
            SuccessMessage("Workout Added Successfully");
            ResetWorkoutModel();
        }
    }

    void ResetWorkoutModel()
    {
        Workout = new Models.WorkoutModel();
        Workout.Date = DateTime.Now;
        AddRound();
    }

    private Models.LogMessageModel GenerateLogMessage(string body, Models.WorkoutModel workout, string color )
    {
        Models.LogMessageModel logMessage = new();
        logMessage.MessageDate = Workout.Date;
        logMessage.MessageBody = body;
        logMessage.MessageColor = color;
        return logMessage;
    }

    

}
