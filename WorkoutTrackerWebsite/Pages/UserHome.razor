@page "/UserHome"
@using Microsoft.AspNetCore.Identity;
@using System.Globalization;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
@using WorkoutTrackerWebsite.Pages.HomeComponents
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
<PageTitle>My Workouts</PageTitle>
@layout UserLayout


<img class="background" src="Images/Background.png">





    @if (showAddMainExerciseActive)
    {

        <div class="AddExerciseBox bg-dark rounded-2 p-2 
qsw translate-middle-x m-0">
            <div class="d-inline-flex justify-content-between w-100">
                <span class="m-1 text-start text-white">Search an exercise</span>
                <span @onclick="HideAddMainExercise" style="color:red; cursor:pointer" class="oi oi-circle-x fs-5 m-0 " aria-hidden="true"></span>
            </div>
            <div>
            <div class="fs-3 mb-4 text-start w-100">
                <RadzenCard>
                    <RadzenDropDown Style="width:100%;" TValue="string" @bind-Value="_selectedMainExerciseName" Placeholder="Select Exercise" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@(_exercises.OrderBy(x=>x.Name))" TextProperty="Name" ValueProperty="Name" />
                </RadzenCard>
            </div>
    
                <div class="">
                    <button class="btn btn-success" @onclick="(async ()=> await SaveExerciseInToMainExercisesString())">Add Exercise To Main Exercises</button>
                </div>
            </div>

        </div>
    }

<div id="PageContainer" class=" w-100 d-flex flex-column flex-wrap  justify-content-start bg-white m-auto" style="min-height:950px; ">
    <ul class="nav nav-tabs bg-dark fs-4 px-2" >
        <li >
            <button @onclick="ShowPage1" class="nav-link @active1 ">Welcome</button>
        </li>
        <li >
            <button @onclick="ShowPage2" class="nav-link @active2">Workouts</button>
        </li>
        <li  >
            <button @onclick="ShowPage3" class="nav-link @active3  ">Exercises</button>
        </li>
    </ul>

    

    <Animation @key="@startAnimationKey" AnimationNameSelect="@AnimationsNames.fadeUp" AnimationDurationSet="800" AnimationDelaySet="90">
        @if (is1Active)
        {
            <div class=" position-relative m-auto  ">
                <div class="   m-auto p-0  ">
                    <div class="card-header bg-dark text-white">
                        <h1 class="card-title fs-1 text-center ">@userName's profile  </h1>
                        <div class="d-flex flex-row flex-wrap justify-content-around gap-2 w-100 text-center">
                            <div class="fs-5" id="PeriodeTraining"><b>First workout</b> : <span class="fs-2">@GetperiodeTraining() </span> days</div>
                            <div class="fs-5"><b>T. Lifted</b> : <span class="fs-2">@_userAchievements.TotalWeightLifted.ToString("0") </span> Kg</div>
                            <div class="fs-5"><b>T. Workouts</b> : <span class="fs-2">@_userAchievements.TotalWorkoutSessions</span> </div>
                        </div>
                    </div>



                    <div class="d-flex flex-row gap-2 flex-wrap justify-content-evenly" style="min-height:120px;">

                        @if (ConvertListOfStringsToListOfExercisesInfos().Count != 0)
                        {
                            @foreach (var exercise in _mainExercisesInfo)
                            {

                                <div class="d-flex flex-column  justify-content-evenly flex-lg-wrap">

                                    <div style="width:300px;">
                                        <span @onclick="(()=>ShowExerciseDropDown(exercise))" style="cursor:pointer" class="fs-5 m-auto hoverable position-relative ">
                                            @exercise.Name
                                            @if (exercise.IsDropDownActive)
                                            {
                                                <div @onclick="( async() => await DeleteExerciseFromMainExercisesString(exercise.Name))" style="  z-index:30;" class="position-absolute rounded  bg-dark p-2 text-center dropdownItemFather w-100 ">
                                                    <span style="cursor:pointer" class="text-danger dropdownItemCustom ">Delete</span>
                                                </div>

                                            }
                                        </span>
                                        <div class="fs-2 m-auto">@exercise.MaxWeight.ToString("0") <span class="m-auto fs-5"> Kg </span></div>




                                    </div>
                                </div>



                            }
                            // if not full
                            @if (ConvertListOfStringsToListOfExercisesInfos().Count < 4)
                            {
                                <div class="d-flex flex-column  justify-content-center">
                                    <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                                </div>
                            }
                        }
                        // Empty
                        else
                        {
                            <div class="d-flex flex-column  justify-content-center flex-lg-wrap ">
                                <div style="color:gray; ">Pin Here your favorites Exercises (max 4).</div>
                                <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>

                            </div>
                        }
                    </div>



                </div>
            </div>
            <div id="WokroutsCharts" class=" w-100 d-flex flex-column flex-wrap gap-5 justify-content-around bg-white p-5" style="min-height:400px;">
                <div class="flex-grow-1 shadow p-5 hoverableGetBig m-auto" style="">
                    @if (GetperiodeTraining() == 0)
                    {
                        if (userHaveNoWorkoutYet)
                        {
                            <div>It looks like you haven't added a workout yet.</div>
                        }
                        else
                        {
                            <div>Calculating you data...</div>

                        }
                       
                    }
                    else
                    {
                        <div style="font-size:23px;" class=" text-start">
                            <div style="font-size:27px"><b>@welcomeMessage</b></div>You've been working out with us for <b>@GetperiodeTraining().ToString()</b> days now and have trained a total of <b>@_userAchievements.TotalWorkoutSessions</b> times. <br /> On average, that's:
                            <ul class="m-3">
                                <li class="m-2"><b>@CalculateTrainingRate(7)</b> training sessions per week,</li>
                                <li class="m-2"><b>@CalculateTrainingRate(30)</b>  training sessions per month,</li>
                                <li class="m-2"><b>@CalculateTrainingRate(365)</b>  training sessions per year.</li>
                            </ul>
                            @motivationalMessage
                        </div>
                    }

                </div>


                

            </div>
        }
        else if (is2Active)
        {
            <div style="max-width:1800px;" id=" Workouts" class=" card bg-light rounded-3 my-1 w-100 m-auto shadow-lg d-flex flex-column justify-content-start ">
                <div id="WorkoutsHeader" class="card-header">
                    <h1 class="card-title text-center ">My Workouts</h1>
                </div>
                @foreach (var wrk in _userWorkouts.OrderByDescending(x => x.Date).ToList().Take(rowsDisplayed))
                {
                    <div id="Workout" class="position-relative shadow-lg rounded" style="width:95%; margin:10px auto">
                        <div @onclick="(async() => await ToggleSidebar(wrk))" id="dateHolder" class=" bg-dark text-light" style="cursor:pointer;">
                            <div class="text-center fs-3  ">@wrk.Date.ToString("D")</div>
                        </div>
                        @if (wrk.IsExpanded)
                        {
                            <div id="RoundsAndNotesContainer" class="position-relative flex-grow-1 d-flex flex-column justify-content-evenly  my-3  @wrk.CssAnimation">
                                @if (!string.IsNullOrEmpty(@wrk.Note))
                                {
                                    <div class="mx-5 flex-grow-1 w-75 m-auto text-dark d-flex flex-row flex-wrap justify-content-start gap-3 ">

                                        <div class=" fs-4 fw-bold">Note: </div>

                                        <div class="fs-4 text-start"> @wrk.Note</div>

                                    </div>
                                    <hr />
                                }
                                <div id="RoundsContainer" class="d-flex flex-row justify-content-center flex-wrap gap-5 ">
                                    @foreach (var round in wrk.Rounds)
                                    {

                                        // declare variables and populate them with the methods
                                        decimal previousMaxWeight = RoundInfoLogic.Get_Previous_Round_Best_Set_s_Weight(_userWorkouts, round);
                                        int previousMaxWeightReps = RoundInfoLogic.Get_Previous_Round_Best_Set_s_Reps(_userWorkouts, round, previousMaxWeight);

                                        // Get previous workout Id
                                        RoundInfos matchingRoundInfo = RoundInfoLogic.Get_Round_Matching_RoundInfo(_userWorkouts, round);
                                        Guid previousWorkoutId = RoundInfoLogic.Get_LastWorkout_Including_thisRound_Exercise(_userWorkouts, matchingRoundInfo).Id;

                                        // Check if it's the first time
                                        bool firstTime = false;
                                        if (previousWorkoutId == wrk.Id)
                                        {
                                            firstTime = true;
                                        }

                                        bool maxSetFound = false;

                                        // calclulate the difference
                                        decimal WeightDifference = thisRoundMaxWeight(round) - previousMaxWeight;
                                        int RepsDifference = thisRoundMaxWeightReps(round) - previousMaxWeightReps;

                                        <div id="RoundContainer" class=" d-flex flex-column justify-content-start shadow border rounded" style="width:450px;">
                                            <div id="RoundHeader" class=" p-1 w-100 d-flex flex-row justify-content-between border rounded bg-secondary text-light mb-2">
                                                <div id="RoundExerciseName" class=" flex-grow-1 ms-1 " style="font-size:22px;">
                                                    #@round.RoundNumber @round.ExerciseName
                                                </div>
                                                <div id="RoundTopInfos" class=" ">
                                                    @if (firstTime)
                                                    {
                                                        <div class="bg-success shadow-sm"><span class="text-white m-1  rounded  fw-bold  fs-6  fst-italic "> First Time!</span></div>
                                                    }
                                                    else
                                                    {
                                                        decimal maxWeight_BeforeThisWorkout = ExerciseInfoLogic.GetExerciseMaxWeightLifted(round.ExerciseName, _userWorkouts.Where(x => x.Id != wrk.Id).ToList());
                                                        int maxWeightReps_BeforeThisWorkout = ExerciseInfoLogic.GetExerciseMaxWeightReps(round.ExerciseName, maxWeight_BeforeThisWorkout, _userWorkouts.Where(x => x.Id != wrk.Id).ToList());
                                                        @if (thisRoundMaxWeight(round) < maxWeight_BeforeThisWorkout)
                                                        {
                                                            if (maxWeightReps_BeforeThisWorkout == 1)
                                                            {
                                                                <span class="text-warning fs-6  "> Max: @maxWeight_BeforeThisWorkout Kg x @maxWeightReps_BeforeThisWorkout Rep</span>

                                                            }
                                                            else
                                                            {
                                                                <span class="text-light fs-6 x ">Max: @maxWeight_BeforeThisWorkout Kg x @maxWeightReps_BeforeThisWorkout Reps</span>

                                                            }
                                                        }
                                                        else if (thisRoundMaxWeight(round) == maxWeight_BeforeThisWorkout)
                                                        {
                                                            if (thisRoundMaxWeightReps(round) > maxWeightReps_BeforeThisWorkout)
                                                            {
                                                                <div class="bg-success shadow-sm"><span class="text-white m-1  rounded  fw-bold  fs-6  fst-italic "> New Max!</span></div>
                                                            }
                                                            else
                                                            {
                                                                if (maxWeight_BeforeThisWorkout == 0)
                                                                {
                                                                    <span class="text-light   fs-6 mt-3  "> Max: @maxWeightReps_BeforeThisWorkout Reps</span>
                                                                }
                                                                else
                                                                {
                                                                    if (maxWeightReps_BeforeThisWorkout == 1)
                                                                    {
                                                                        <span class="text-light  fs-6 mt-3  "> Max: @maxWeight_BeforeThisWorkout Kg x @maxWeightReps_BeforeThisWorkout Rep</span>

                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-light fs-6 mt-3  "> Max: @maxWeight_BeforeThisWorkout Kg x @maxWeightReps_BeforeThisWorkout Reps</span>

                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <div class="bg-success shadow-sm"><span class="text-white m-1  rounded  fw-bold  fs-6  fst-italic "> New Max!</span></div>

                                                        }
                                                    }
                                                </div>
                                            </div>




                                            @foreach (var set in round.Sets)
                                            {
                                                <div id="sets" class=" w-100 h-100 d-flex flex-column justify-content-start flex-nowrap p-1">

                                                    <div id="set" class="d-flex flex-row justify-content-between w-100 px-5  hoverable  ">
                                                        @if (set.Weight == 0)
                                                        {
                                                            if (set.Reps == 1)
                                                            {
                                                                <div class="fs-5 flex-grow-1"><b>@set.Reps</b> rep</div>
                                                            }
                                                            else
                                                            {
                                                                <div class="fs-5 "><b>@set.Reps</b> reps</div>
                                                            }


                                                        }
                                                        else
                                                        {
                                                            <div class="fs-5  "><b>@set.Weight.ToString("0.0")</b> Kg x <b>@set.Reps</b> rep</div>

                                                        }

                                                        @if (set.Weight == thisRoundMaxWeight(round) && !maxSetFound)
                                                        {
                                                            @if (WeightDifference == 0)
                                                            {
                                                                if (set.Reps == thisRoundMaxWeightReps(round))
                                                                {
                                                                    if (RepsDifference != 0)
                                                                    {
                                                                        maxSetFound = true;
                                                                        <div class="@SetDifferenceClass(RepsDifference) fs-5">
                                                                            @if (RepsDifference > 0)
                                                                            {
                                                                                <span>+</span>
                                                                            }

                                                                            <span>@RepsDifference  </span>

                                                                            @if (MathF.Abs(RepsDifference) == 1)
                                                                            {
                                                                                <span> rep</span>
                                                                            }
                                                                            else
                                                                            {
                                                                                <span> reps</span>
                                                                            }
                                                                        </div>
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                maxSetFound = true;
                                                                <div class="@SetDifferenceClass(WeightDifference)  fs-5 ">
                                                                    @if (WeightDifference > 0)
                                                                    {
                                                                        <span>+</span>
                                                                    }

                                                                    @WeightDifference.ToString("0.0") KG
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            }

                                        </div>
                                    }
                                </div>





                            </div>
                        }

                    </div>

                }
            </div>
        }
        else if (is3Active)
        {
            <div class="d-flex flex-column justify-content-around  flex-wrap p-5">
                <Exercises _exercisesInfo="_exercisesInfo" _categories="_categories"></Exercises>
            </div>
        }



       
    </Animation>


</div>


@code {
    string userId;
    string userName;
    UserAchievementsModel _userAchievements = new();
    List<WorkoutModel> _userWorkouts = new();
    List<ExerciseModel> _exercises = new();
    List<ExerciseCategoryModel> _categories = new();
    List<ExerciseInfos> _exercisesInfo = new();
    List<ExerciseInfos> _mainExercisesInfo = new();
    string welcomeMessage = "";
    string motivationalMessage = "";

    bool userHaveNoWorkoutYet = false;
    //Getting Data
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user.Identity.Name;
        userId = user.Claims.FirstOrDefault().Value;


        motivationalMessage = GetRandomMotivationalMessage();
        welcomeMessage = GetRandomWelcomeMessage(userName);
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _userWorkouts = await repo.GetWorkoutsByUserIdAsync(userId);
            _userAchievements = await repo.GetUserAchievementByUserId(userId);
            await repo.UpdateUserAchievementAsync(userId, userName);
            _exercises = await repo.GetAllExercisesAsync();
            _categories = await repo.GetAllExerciseCategories();
        }
        _exercisesInfo = ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _userWorkouts);

        _mainExercisesInfo = ConvertListOfStringsToListOfExercisesInfos();
        
        if (_userWorkouts.Count == 0 || _userWorkouts == null)
        {
            userHaveNoWorkoutYet = true;
        }
    }





    //NavMenu
    bool is1Active = true;
    bool is2Active = false;
    bool is3Active = false;
    int startAnimationKey = 0;
    string active1 = "active";
    string active2 = "";
    string active3 = "";

    void ShowPage1()
    {
        startAnimationKey--;
        is1Active = true;
        active1 = "active";

        is2Active = false;
        active2 = "";

        is3Active = false;
        active3 = "";
    }
    void ShowPage2()
    {
        startAnimationKey--;
        is1Active = false;
        active1 = "";

        is2Active = true;
        active2 = "active";

        is3Active = false;
        active3 = "";
    }
    void ShowPage3()
    {
        startAnimationKey--;
        is1Active = false;
        active1 = "";

        is2Active = false;
        active2 = "";

        is3Active = true;
        active3 = "active";
    }


    //Get dates Info
    int GetperiodeTraining()
    {
        if (_userWorkouts!=null && _userWorkouts.Count != 0)
        {
            TimeSpan difference = DateTime.Now - _userWorkouts.MinBy(x => x.Date).Date;
            return difference.Days;

        }
        return 0;

    }
    float CalculateTrainingRate(int reference)
    {
        if (GetperiodeTraining()==0)
        {
            return 0;
        }
        float rate = (_userAchievements.TotalWorkoutSessions * reference) / GetperiodeTraining(); 
        return rate;
    }

    //  Add The exercise name to MainExerciseString
    string _selectedMainExerciseName = "";
    async Task SaveExerciseInToMainExercisesString()
    {
        if (GetMainExercisesListFromString().Any(x => x == _selectedMainExerciseName))
        {
            return;
        }

        if (_selectedMainExerciseName == "")
        {
            HideAddMainExercise();
        }
        else
        {
            if (_userAchievements.MainExercises != null)
            {
                string oldString = _userAchievements.MainExercises;
                string newString = oldString + ";" + _selectedMainExerciseName;
                _userAchievements.MainExercises = newString;
                HideAddMainExercise();
            }
            else
            {
                _userAchievements.MainExercises = _selectedMainExerciseName;
                HideAddMainExercise();
            }
            using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
            {
                await repo.UpdateMainExercisesStringByUserIdAsync(userId, _userAchievements.MainExercises);

            }
        }
        _mainExercisesInfo = ConvertListOfStringsToListOfExercisesInfos();


    }

    //extract a list from string:MainExercises
    List<string> GetMainExercisesListFromString()
    {

        if (_userAchievements==null ||  _userAchievements.MainExercises == null)
        {
            return new List<string>();
        }
        return  _userAchievements.MainExercises.Split(";").ToList();
    }

    //convert the List of strings to list of ExerciseInfo
    List<ExerciseInfos> ConvertListOfStringsToListOfExercisesInfos()
    {
        List<ExerciseInfos> _mainExercisesInfo = new();
        //loop into each string and then find its matching exercise
        foreach (var exerciseName in GetMainExercisesListFromString())
        {
            foreach (var exercise in _exercises)
            {
                if (exerciseName == exercise.Name)
                {
                    // now create an exercise Info from the exercise name and add it to the list
                    _mainExercisesInfo.Add(ExerciseInfoLogic.CreateExerciseInfo(exerciseName, _userWorkouts, _exercises));
                }
            }
        }
        return _mainExercisesInfo;
    }

    //Delete Exercise from MainString
    async Task DeleteExerciseFromMainExercisesString(string exerciseName)
    {
        //_userAchievements.MainExercises = "";
        List<string> UpdatedStringsList = GetMainExercisesListFromString();
        string mainString = "";
        foreach (string exercise in GetMainExercisesListFromString())
        {
            if (exercise != exerciseName)
            {
                mainString += exercise + ";";
            }
        }
        string result = mainString.Remove(mainString.Length - 1);

        _userAchievements.MainExercises = result;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.UpdateMainExercisesStringByUserIdAsync(userId, _userAchievements.MainExercises);

        }
        _mainExercisesInfo = ConvertListOfStringsToListOfExercisesInfos();
    }

    // Ui
    // add fav exercise menu

    bool showAddMainExerciseActive = false;
    int KeyCounter = 0;
    void ShowExerciseDropDown(ExerciseInfos ex)
    {
        ex.IsDropDownActive = !ex.IsDropDownActive;

        foreach (var exerci in _mainExercisesInfo)
        {
            if (exerci.Name != ex.Name)
            {
                exerci.IsDropDownActive = false;

            }
        }




  

    }

    void ShowAddMainExercise()
    {
        showAddMainExerciseActive = true;
        KeyCounter++;

    }
     void HideAddMainExercise()
    {
        showAddMainExerciseActive = !showAddMainExerciseActive;

    }
    //Braging Card
    string widthCalculated()
    {
        int width = 100 / (ConvertListOfStringsToListOfExercisesInfos().Count + 1);
        string widthInstring = width.ToString();
        string percentage = widthInstring + "%;";
        return percentage;
    }

    private async Task ToggleSidebar(WorkoutModel wrk)
    {
        if (wrk.IsExpanded == true) // only delay when we need to set div to display: none;
        {
            wrk.CssAnimation= "slide-out-top";
            await Task.Delay(300); // this works kinda clunky now
            
        }
        wrk.IsExpanded = !wrk.IsExpanded;
        wrk.CssAnimation = "slide-in-top";
        

    }





    //Workout board
    int rowsDisplayed = 10;
    // Finding the last time reps and weights doing the same exercise
    decimal thisRoundMaxWeight(RoundModel round)
    {
        return round.Sets.MaxBy(x => x.Weight).Weight;
    }

    int thisRoundMaxWeightReps(RoundModel round)
    {
        return round.Sets.Where(x => x.Weight == thisRoundMaxWeight(round)).MaxBy(x => x.Reps).Reps;
    }


    string SetDifferenceClass(decimal difference)
    {
        if (difference > 0)
        {
            return "text-success";
        }
        else if (difference == 0)
        {
            return "text-success";
        }
        return "text-danger";
    }







    //google Search
    async Task GoogleSearchExName(string exerciseName, string exerciseCategory)
    {
        string encodedQuery = System.Web.HttpUtility.UrlEncode("Exercise " + exerciseName + " " + exerciseCategory);
        string searchUrl = $"https://www.google.com/search?q={encodedQuery}&tbm=isch";

        await JSRuntime.InvokeAsync<object>("open", searchUrl, "_blank");

    }




  


    public static string GetRandomMotivationalMessage()
    {
        // Define an array of possible message variations
        string[] messages = new string[]
        {
        "Keep pushing yourself!",
        "Great job so far, keep it up!",
        "You're doing amazing, keep it up!",
        "Your hard work is paying off, keep it up!",
        "Don't stop now, you've got this!",
        "Keep on training, you're making progress!",
        "Keep up the awesome effort!",
        "You're doing awesome, keep it up!",
        "Keep up the consistency, it's paying off!",
        "You're crushing it, keep up the good work!"
        };

        // Generate a random index to select a message from the array
        Random random = new Random();
        int index = random.Next(0, messages.Length);

        // Return the selected message
        return messages[index];
    }
    public string GetRandomWelcomeMessage(string userName)
    {
        string[] welcomeMessages = new string[] {
        $"You're here {userName}. Let's do this!",
        $"Welcome back, {userName}.",
        $"Time to crush your goals. Welcome!",
        $"Great to see you again!",
        $"Welcome back, {userName}. Let's go!",
        $"The journey continues. Welcome!",
        $"Welcome, {userName}. Time to shine.",
        $"You got this. Welcome back!",
        $"Welcome, {userName}. Time to save the day!",
        $"Welcome {userName} to a world of possibilities. Let's make it happen!"
    };

        Random rnd = new Random();
        int index = rnd.Next(0, welcomeMessages.Length);

        return welcomeMessages[index];
    }

    
}
