@page "/UserHome"
@using Microsoft.AspNetCore.Identity;
@using System.Globalization;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Models;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
<PageTitle>My Workouts</PageTitle>
@layout UserLayout


<img class="background" src="Images/Background.png">


<div class="BigContainer w-100 rounded-3">
    <div class="BraggingCard card m-auto p-0 rounded-3 ">
        <div class="card-header bg-dark text-white">
            <h1 class="card-title fs-1 text-center ">@userName's card </h1>
            <div class="d-sm-inline-flex justify-content-around w-100 text-center">
                <div class="fs-5" id="level"><b>Level</b> : <span class="fs-2">@_userAchievements.Level</span></div>
                <div class="fs-5"><b>T. Lifted</b> : <span class="fs-2">@_userAchievements.TotalWeightLifted.ToString("0") </span> Kg</div>
                <div class="fs-5"><b>T. Workouts</b> : <span class="fs-2">@_userAchievements.TotalWorkoutSessions</span> </div>
            </div>
        </div>

        
        
            <div class="Exercises">

            @if (ConvertListOfStringsToListOfExercisesInfos().Count != 0)
            {
                @foreach (var exercise in ConvertListOfStringsToListOfExercisesInfos())
                {
                    <div class="ExercisesFavoriteSlot" style="width:@widthCalculated()">
                        <div class="flex-row"><span @onclick="(async ()=> await DeleteExerciseFromMainExercisesString(exercise.name))" class="oi oi-x delete top-0 start-0 m-0"></span> <span class="favoriteExercise"><b>@exercise.name</b> </span></div>
                        <div class="favoriteExerciseWeight">@exercise.maxWeight.ToString("0") <span class="small">KG</span></div>
                    </div>
                }
                // if not full
                @if (ConvertListOfStringsToListOfExercisesInfos().Count < 4)
                {
                    <div class="emptySlot" style="width:@widthCalculated()">
                        <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                    </div>
                }
            }
            // Empty
            else
            {
                <div class="emptySlot w-100 ">
                    <div style="color:gray; margin-bottom:auto;">Pin Here your favorites Exercises (max 4).</div>
                    <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                </div>
            }

            
        @*    @switch (ConvertListOfStringsToListOfExercisesInfos().Count)
            {
                

                case 0:
                    if (!showAddMainExerciseActive)
                    {
                        <div class="emptySlot w-100 ">
                            <div style="color:gray; margin-bottom:auto;">Pin Here your favorites Exercises (max 4).</div>

                        <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                        </div>
                    }
                    else
                    {
                        <div class="emptySlot w-100 ">
                        </div>
                    }
                    break;
                case 1:
                    <div class="ExercisesFavoriteSlot" style="width:@widthCalculated()">

                        <div class="flex-row"><span class="oi oi-x delete top-0 start-0 m-0"></span> <span class="favoriteExercise"><b>@ConvertListOfStringsToListOfExercisesInfos()[0].name</b> </span></div>

                        <div class="favoriteExerciseWeight">@ConvertListOfStringsToListOfExercisesInfos()[0].maxWeight.ToString("0") <span class="small">KG</span></div>

                    </div>
                    if (!showAddMainExerciseActive)
                    {
                        <div class="emptySlot" style="width:@widthCalculated()">
                            <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                        </div>

                    }
                    break;
                case 2:
                    for (int i = 0; i < ConvertListOfStringsToListOfExercisesInfos().Count; i++)
                    {
                        <div class="ExercisesFavoriteSlot" style="width:@widthCalculated()">
                            <div class="flex-row"><span class="oi oi-x delete top-0 start-0 m-0"></span> <span class="favoriteExercise"><b>@ConvertListOfStringsToListOfExercisesInfos()[i].name</b> </span></div>

                            <div class="favoriteExerciseWeight">@ConvertListOfStringsToListOfExercisesInfos()[i].maxWeight.ToString("0") <span class="small">KG</span></div>

                        </div>
                    }
                    if (!showAddMainExerciseActive)
                    {
                        <div class="emptySlot" style="width:@widthCalculated()">
                            <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus fs-5 text-success add  text-center  " aria-hidden="true"></div>
                        </div>

                    }
                    break;
                case 3:
                    for (int i = 0; i < ConvertListOfStringsToListOfExercisesInfos().Count; i++)
                    {
                        <div class="ExercisesFavoriteSlot" style="width:@widthCalculated()">
                            <div class="flex-row"><span class="oi oi-x delete top-0 start-0 m-0"></span> <span class="favoriteExercise"><b>@ConvertListOfStringsToListOfExercisesInfos()[i].name</b> </span></div>

                            <div class="favoriteExerciseWeight">@ConvertListOfStringsToListOfExercisesInfos()[i].maxWeight.ToString("0") <span class="small">KG</span></div>

                        </div>
                    }
                    if (!showAddMainExerciseActive)
                    {
                        <div class=" emptySlot" style="width:@widthCalculated()">
                            <div @onclick="ShowAddMainExercise" style=" cursor:pointer; " class="oi oi-plus  fs-5 text-success add  text-center  " aria-hidden="true"></div>
                        </div>

                    }
                    break;
                case 4:
                    for (int i = 0; i < ConvertListOfStringsToListOfExercisesInfos().Count; i++)
                    {
                        <div class="ExercisesFavoriteSlot" style="width:@widthCalculated()">
                            <div class="flex-row"><span class="oi oi-x delete top-0 start-0 m-0"></span> <span class="favoriteExercise"><b>@ConvertListOfStringsToListOfExercisesInfos()[i].name</b> </span></div>

                            <div class="favoriteExerciseWeight">@ConvertListOfStringsToListOfExercisesInfos()[i].maxWeight.ToString("0") <span class="small">KG</span></div>

                        </div>
                    }
                    break;
            }*@
            </div>
            
       

    </div>
</div>

<Animation @key="@KeyCounter" AnimationNameSelect="@AnimationsNames.zoomIn">
    @if (showAddMainExerciseActive)
    {

        <div class="AddExerciseBox bg-dark rounded-2 p-2 border border-3 border-light  translate-middle-x m-0">
            <div class="d-inline-flex justify-content-between w-100">
                <span class="m-1 text-start text-white">Search an exercise</span>
                <span @onclick="HideAddMainExercise" style="color:red; cursor:pointer" class="oi oi-circle-x fs-3 m-0 " aria-hidden="true"></span>
            </div>
            <div>
                <select class="form-select   " id="RoundExercice" @bind="_selectedMainExerciseName">
                    <option value="">All</option>
                    @foreach (Models.ExerciseModel exercice in _exercises.OrderBy(x => x.Name))
                    {
                        <option value="@exercice.Name">@exercice.Name</option>
                    }
                </select>
                <div class="">
                    <button class="btn btn-success" @onclick="(async ()=> await SaveExerciseInToMainExercisesString())">Add Exercise To Main Exercises</button>
                </div>
            </div>

        </div>
    }
</Animation>



<Animation @key="-55" AnimationNameSelect="@AnimationsNames.fadeUp" AnimationDurationSet="800" AnimationDelaySet="90">

    <div class="container m-auto mt-5  " style="max-width:1000px;">
    
    <div class="card bg-light rounded-3  ">
        <div class="card-header">
            <h1 class="card-title text-center">My Workouts</h1>
        </div>
        @foreach (var wrk in _userWorkouts.OrderByDescending(x => x.Date).ToList().Take(rowsDisplayed))
        {
            
            <div class=" rounded-3 bg-dark text-light">
                <div class="text-center fs-1  ">@wrk.Date.ToString("D")</div>
            </div>
             <div class="" >
                    <div class="ps-5  pe-5">


                        @foreach (var round in wrk.Rounds)
                        {
                            // Finding the last time reps and weights doing the same exercise
                            decimal thisRoundMaxWeight = round.Sets.MaxBy(x => x.Weight).Weight;
                            
                            // Handle the case where multiple sets have the maxWeight
                            int thisRoundMaxWeightReps = round.Sets.Where(x => x.Weight == thisRoundMaxWeight).MaxBy(x => x.Reps).Reps;

                            decimal previousMaxWeight = 0;
                            int previousMaxWeightReps = 0;
                            bool maxSetFound = false;
                            bool firstTime = false;
                            if (AllRoundsInfo().Any(x => x.roundId == round.Id))
                            {
                                //find the matching RoundInfo
                                RoundInfo matchingRoundInfo = AllRoundsInfo().First(x => x.roundId == round.Id);
                                //Get the last workout with the same exercise
                                Guid previousWorkoutId = matchingRoundInfo.LastWorkoutIdWithTheSameExerciseName;
                                WorkoutModel previousWorkout = _userWorkouts.First(x => x.Id == previousWorkoutId);

                                //get the round from the last workout with the same exercise
                                Guid PreviousRoundId = matchingRoundInfo.LastRoundIdWithTheSameExerciseName;
                                RoundModel previousRound = previousWorkout.Rounds.First(x => x.Id == PreviousRoundId);

                                //Find the set with the max weight
                                SetModel previousSetWithMaxWeight = previousRound.Sets.MaxBy(x => x.Weight);

                                // Get the weight
                                previousMaxWeight = previousSetWithMaxWeight.Weight;

                                //handle multiple maxWeights sets
                                // Get the sets :
                                IEnumerable<SetModel> previousSetsWithMaxWeight = previousRound.Sets.Where(x => x.Weight == previousMaxWeight);
                                
                                // Get the max reps :
                                previousMaxWeightReps = previousSetsWithMaxWeight.MaxBy(x=>x.Reps).Reps;


                                if (previousWorkoutId == wrk.Id)
                                {
                                    firstTime = true;
                                }
                            }

                            decimal WeightDifference = thisRoundMaxWeight - previousMaxWeight;
                            int RepsDifference = thisRoundMaxWeightReps - previousMaxWeightReps;

                            <div class="w-100 d-inline-flex justify-content-between">
                                <div class="fs-1 fw-bold table ">
                                    @round.ExerciseName


                                </div>
                                @if (firstTime)
                                {
                                    <span class="text-success text-end  w-100 fs-5 mt-3 fst-italic "> First Time!</span>
                                }
                                else
                                {
                                    decimal maxWeight = GetExerciseMaxWeightLifted(round.ExerciseName);
                                    int maxWeightReps = GetExerciseMaxWeightReps(round.ExerciseName, maxWeight);
                                    @if (thisRoundMaxWeight < maxWeight)
                                    {
                                        if (maxWeightReps == 1)
                                        {
                                            <span class="text-dark text-end w-100 fs-5 mt-3 fst-italic "><b> Max: @maxWeight Kg x @maxWeightReps Rep</b></span>

                                        }
                                        else
                                        {
                                            <span class="text-dark text-end w-100 fs-5 mt-3 fst-italic "><b> Max: @maxWeight Kg x @maxWeightReps Reps</b></span>

                                        }
                                    }
                                    else if (thisRoundMaxWeight == maxWeight)
                                    {
                                        if (thisRoundMaxWeightReps > maxWeightReps)
                                        {
                                            <span class="text-success text-end w-100 fs-5 "> New Max </span>
                                        }
                                        else
                                        {
                                            if (maxWeight == 0)
                                            {
                                                <span class="text-dark text-end w-100 fs-5 mt-3 fst-italic "><b> Max: @maxWeightReps Reps</b></span>
                                            }
                                            else
                                            {
                                                if (maxWeightReps == 1)
                                                {
                                                    <span class="text-dark text-end w-100 fs-5 mt-3 fst-italic "><b> Max: @maxWeight Kg x @maxWeightReps Rep</b></span>

                                                }
                                                else
                                                {
                                                    <span class="text-dark text-end w-100 fs-5 mt-3 fst-italic "><b> Max: @maxWeight Kg x @maxWeightReps Reps</b></span>

                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-success text-end w-100 fs-5 "> New Max </span>

                                    }
                                }

                            </div>



                            @foreach (var set in round.Sets)
                            {
                                <div class="m-auto  w-100">

                                    <div class="d-sm-inline-flex gap-5 m-auto justify-content-between  w-100 hoverable">
                                        @if (set.Weight == 0)
                                        {
                                            if (set.Reps == 1)
                                            {
                                                <div class="fs-3 ExerciseRecord"><b>@set.Reps</b> rep</div>
                                            }
                                            else
                                            {
                                                <div class="fs-3 ExerciseRecord"><b>@set.Reps</b> reps</div>
                                            }


                                        }
                                        else
                                        {
                                            <div class="fs-3 ExerciseRecord"><b>@set.Weight.ToString("0.0")</b> Kg x <b>@set.Reps</b> rep</div>

                                        }

                                        @if (set.Weight == thisRoundMaxWeight && !maxSetFound)
                                        {
                                            @if (WeightDifference == 0)
                                            {
                                                if (set .Reps == thisRoundMaxWeightReps)
                                                {
                                                    if (RepsDifference != 0)
                                                    {
                                                        maxSetFound = true;
                                                        <div class="@SetDifferenceClass(RepsDifference) ExerciseDifference fs-3 ">
                                                            @if (RepsDifference > 0)
                                                            {
                                                                <span>+</span>
                                                            }

                                                           <span>@RepsDifference  </span>

                                                            @if (MathF.Abs(RepsDifference) == 1)
                                                            {
                                                                <span> rep</span>
                                                            }
                                                            else
                                                            {
                                                                <span> reps</span>
                                                            }
                                                            <span><small><small> vs last workout</small></small> </span>
                                                        </div>
                                                    }
                                                }
                                                
                                            }
                                            else
                                            {
                                                maxSetFound = true;
                                                <div class="@SetDifferenceClass(WeightDifference) ExerciseDifference fs-3 ">
                                                    @if (WeightDifference > 0)
                                                    {
                                                        <span>+</span>
                                                    }

                                                    @WeightDifference.ToString("0.0") KG
                                                    <span><small><small> vs last workout</small></small> </span>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            <hr />
                            
                        }
                       
                    </div>
                    <div class=" m-auto end-0 flex-row justify-content-between text-center mt-4 bg-secondary text-light rounded" style="width:95%;">
                        <div style="width:35%; height:3px;" class=" d-inline-block bg-white mb-1  rounded "></div>
                        <div  class=" d-inline-block mx-1 fs-4 fw-bold">Note</div>
                        <div style="width:35%; height:3px;" class="d-inline-block bg-white mb-1 rounded "></div>
                        <div class="rounded px-5   fs-5 p-1 mx-5   ">
                            <div class="text-start">@wrk.Note</div>
                        </div>
                    </div>

                    <hr />
             </div>   

               
            PreviousWorkout = wrk;
        }
    </div>
</div>

</Animation>

@code {
    //Getting Data
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user.Identity.Name;
        userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _userWorkouts = await repo.GetWorkoutsByUserIdAsync(userId);
            _userAchievements = await repo.GetUserAchievementByUserId(userId);
            _exercises = await repo.GetAllExercisesAsync();
            _categories = await repo.GetAllExerciseCategories();
        }
        CreateAllExercisesInfo();

    }

    //  Add The exercise name to MainExerciseString
    string _selectedMainExerciseName = "";
    async Task SaveExerciseInToMainExercisesString()
    {
        if (GetMainExercisesListFromString().Any(x => x == _selectedMainExerciseName))
        {
            return;
        }
        //else
        //{
        if (_selectedMainExerciseName == "")
        {
            HideAddMainExercise();
        }
        else
        {
            if (_userAchievements.MainExercises != null)
            {
                string oldString = _userAchievements.MainExercises;
                string newString = oldString + ";" + _selectedMainExerciseName;
                _userAchievements.MainExercises = newString;
                HideAddMainExercise();
            }
            else
            {
                _userAchievements.MainExercises = _selectedMainExerciseName;
                HideAddMainExercise();
            }
            using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
            {
                await repo.UpdateMainExercisesStringByUserIdAsync(userId, _userAchievements.MainExercises);

            }
        }
        //}


    }

    //extract a list from string:MainExercises
    List<string> GetMainExercisesListFromString()
    {

        if ( _userAchievements.MainExercises == null)
        {
            return new List<string>();
        }
        return  _userAchievements.MainExercises.Split(";").ToList();
    }

    //convert the List of strings to list of ExerciseInfo
    List<ExerciseInfo> ConvertListOfStringsToListOfExercisesInfos()
    {
        List<ExerciseInfo> _mainExercisesInfo = new();
        //loop into each string and then find its matching exercise
        foreach (var exerciseName in GetMainExercisesListFromString())
        {
            foreach (var exercise in _exercises)
            {
                if (exerciseName == exercise.Name)
                {
                    // now create an exercise Info from the exercise name and add it to the list
                    _mainExercisesInfo.Add(CreateExerciseInfo(exerciseName));
                }
            }
        }
        return _mainExercisesInfo;
    }

    //Delete Exercise from MainString
    async Task DeleteExerciseFromMainExercisesString(string exerciseName)
    {
        //_userAchievements.MainExercises = "";
        List<string> UpdatedStringsList = GetMainExercisesListFromString();
        string mainString = "";
        foreach (string exercise in GetMainExercisesListFromString())
        {
            if (exercise != exerciseName)
            {
                mainString += exercise + ";";
            }
        }
        string result = mainString.Remove(mainString.Length - 1);
        _userAchievements.MainExercises = result;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.UpdateMainExercisesStringByUserIdAsync(userId, _userAchievements.MainExercises);

        }
    }

    // Ui
    // add fav exercise menu
    bool showAddMainExerciseActive = false;
    int KeyCounter = 0;
    void ShowAddMainExercise()
    {
        showAddMainExerciseActive = true;
        KeyCounter++;

    }
    void HideAddMainExercise()
    {
        showAddMainExerciseActive = false;
    }

    //Workout board
    int rowsDisplayed = 10;
    WorkoutModel PreviousWorkout = new();


    string SetDifferenceClass(decimal difference)
    {
        if (difference > 0)
        {
            return "text-success";
        }
        else if (difference == 0)
        {
            return "text-success";
        }
        return "text-danger";
    }

    //
    List<RoundInfo> AllRoundsInfo()
    {
        List<RoundInfo> RoundsInfo = new();
        foreach (var workout in _userWorkouts.OrderBy(x => x.Date))
        {
            foreach (var round in workout.Rounds)
            {
                RoundInfo roundInfo = new()
                    {
                        roundId = round.Id,
                        workoutId = workout.Id,
                        ExerciseName = round.ExerciseName,

                    };
                if (RoundsInfo.Any(x=>x.ExerciseName == round.ExerciseName))
                {
                    roundInfo.LastRoundIdWithTheSameExerciseName = RoundsInfo.Last(x => x.ExerciseName == round.ExerciseName).roundId;
                    roundInfo.LastWorkoutIdWithTheSameExerciseName = RoundsInfo.Last(x => x.ExerciseName == round.ExerciseName).workoutId;
                }
                else
                {
                    roundInfo.LastRoundIdWithTheSameExerciseName = roundInfo.roundId;
                    roundInfo.LastWorkoutIdWithTheSameExerciseName = roundInfo.workoutId;

                }
                RoundsInfo.Add(roundInfo);
            }

        }
        return RoundsInfo;
    }
    class RoundInfo
    {

        public Guid roundId { get; set; }
        public Guid workoutId { get; set; }

        public string? ExerciseName { get; set; }

        public Guid LastRoundIdWithTheSameExerciseName { get; set; }
        public Guid LastWorkoutIdWithTheSameExerciseName { get; set; }



    }



    //Braging Card
    string widthCalculated()
    {
        int width = 100 / (ConvertListOfStringsToListOfExercisesInfos().Count+1);
        string widthInstring = width.ToString();
        string percentage = widthInstring + "%;";
        return percentage;
    }









    //google Search
    async Task GoogleSearchExName(string exerciseName, string exerciseCategory)
    {
        string encodedQuery = System.Web.HttpUtility.UrlEncode("Exercise " + exerciseName + " " + exerciseCategory);
        string searchUrl = $"https://www.google.com/search?q={encodedQuery}&tbm=isch";

        await JSRuntime.InvokeAsync<object>("open", searchUrl, "_blank");

    }



    string userId;
    string userName;
    UserAchievementsModel _userAchievements = new();
    List<WorkoutModel> _userWorkouts = new();
    List<ExerciseModel> _exercises = new();
    List<ExerciseCategoryModel> _categories = new();

   


    // Calculating Data
    int GetExerciseTimesTrained(string exerciseName)
    {
        int exerciseTimesPlayed = 0;
        foreach (var wrk in _userWorkouts)
        {
            foreach (var round in wrk.Rounds)
            {
                if (round.ExerciseName == exerciseName)
                {
                    exerciseTimesPlayed++;
                }
            }
        }
        return exerciseTimesPlayed;
    }
    decimal GetExerciseMaxWeightLifted(string exerciseName)
    {
        decimal maxWeight = 0;
        foreach (var wrk in _userWorkouts)
        {
            foreach (var round in wrk.Rounds)
            {
                if (round.ExerciseName == exerciseName)
                {
                    foreach (var set in round.Sets)
                    {
                        if (set.Weight > maxWeight)
                        {
                            maxWeight = set.Weight;
                        }
                    }
                }
            }
        }
        return maxWeight;
    }
    int GetExerciseMaxWeightReps(string exerciseName, decimal maxWeight)
    {
        int maxWeightReps = 0;

        foreach (var wrk in _userWorkouts)
        {
            foreach (var round in wrk.Rounds)
            {
                if (round.ExerciseName == exerciseName)
                {
                    foreach (var set in round.Sets)
                    {
                        if (set.Weight == maxWeight)
                        {
                            if (set.Reps > maxWeightReps)
                                maxWeightReps = set.Reps;
                        }
                    }
                }
            }
        }
        return maxWeightReps;
    }
    
    string GetExerciseCategory(string exerciseName)
    {
        string CategoryName = "";
        foreach (var ex in _exercises)
        {
            if (ex.Name == exerciseName)
            {
                CategoryName = ex.Category;
            }
        }
        return CategoryName;
    }



    // Presenting Data
    class ExerciseInfo
    {
        public string? name;
        public string categoy = "";
        public decimal maxWeight = 0;
        public int maxWeightReps = 0;
        public int numberOfSessions = 0;
        public int numberOfSets = 0;
        public int numberOfReps = 0;
        public decimal totalWeightLifted = 0;

    }
    List<ExerciseInfo> _exercisesInfo = new();
    ExerciseInfo CreateExerciseInfo(string exerciseName)
    {
        ExerciseInfo exerciseInfo = new();
        exerciseInfo.name = exerciseName;
        exerciseInfo.numberOfSessions = GetExerciseTimesTrained(exerciseName);
        exerciseInfo.maxWeight = GetExerciseMaxWeightLifted(exerciseName);
        exerciseInfo.maxWeightReps = GetExerciseMaxWeightReps(exerciseName, exerciseInfo.maxWeight);
        exerciseInfo.categoy = GetExerciseCategory(exerciseName);
        return exerciseInfo;
    }
    void CreateAllExercisesInfo()
    {
        _exercisesInfo = new();
        foreach (var ex in _exercises)
        {
            if (ex.Name != null) _exercisesInfo.Add(CreateExerciseInfo(ex.Name));
        }

    }


    //filtering Data
    void ShowByExercise()
    {
        if (_filteredExerciseName == "")
        {
            CreateAllExercisesInfo();
        }
        else
        {
            CreateExercisesInfoByExerciseName(_filteredExerciseName);
        }
    }
    void ShowByCategory()
    {
        if (_filteredExerciseName == "")
        {
            CreateAllExercisesInfo();
        }
        else
        {
            GetExercisesInfoByCategoryName(_filteredExerciseName);
        }
    }


    string _filteredExerciseName = "";

    bool _showByExercise = false;
    bool _showByCategory = false;
    bool _showAll = false;
    //by exercise
    void CreateExercisesInfoByExerciseName(string exerciseName)
    {
        _exercisesInfo = new();
        foreach (var ex in _exercises)
        {
            if (ex.Name == exerciseName)
            {
                _exercisesInfo.Add(CreateExerciseInfo(ex.Name));
            }
        }
    }

    //by category
    void GetExercisesInfoByCategoryName(string categoryName)
    {
        _exercisesInfo = new();
        foreach (var ex in _exercises)
        {
            if (ex.Category == categoryName)
            {
                _exercisesInfo.Add(CreateExerciseInfo(ex.Name));
            }
        }
    }


    //Sorting
    bool _sortAscending;
    private void SortTableByName()
    {
        _exercisesInfo = _sortAscending ? _exercisesInfo.OrderBy(x => x.name).ToList() : _exercisesInfo.OrderByDescending(x => x.name).ToList();
        _sortAscending = !_sortAscending;

    }
    private void SortTableByCategoryName()
    {
        _exercisesInfo = _sortAscending ? _exercisesInfo.OrderBy(x => x.categoy).ToList() : _exercisesInfo.OrderByDescending(x => x.categoy).ToList();
        _sortAscending = !_sortAscending;

    }
    private void SortTableByTimesTrained()
    {
        _exercisesInfo = _sortAscending ? _exercisesInfo.OrderBy(x => x.maxWeight).ToList() : _exercisesInfo.OrderByDescending(x => x.numberOfSessions).ToList();
        _sortAscending = !_sortAscending;

    }
    private void SortTableByMaxWeight()
    {
        _exercisesInfo = _sortAscending ? _exercisesInfo.OrderBy(x => x.maxWeight).ToList() : _exercisesInfo.OrderByDescending(x => x.maxWeight).ToList();
        _sortAscending = !_sortAscending;

    }



}
