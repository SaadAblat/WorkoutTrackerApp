@page "/Social"
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;
<PageTitle>Friends</PageTitle>
@layout UserLayout


@inject NavigationManager UriHelper



<div id="logContainer" class="bg-light ">
    <div class="rounded bg-dark p-lg-5 d-flex flex-column justify-content-start">
        
        @for (int i = 0; i < _logMessages.TakeLast(50).Count(); i++)
        {
            var logMessage = _logMessages.TakeLast(50).ToList()[i];
            <div class="d-flex flex-row justify-content-start gap-5">
                <div class="" style="color:whitesmoke; min-width:150px;">
                    

                @if (i != 0)
                {
                        @if (_logMessages.TakeLast(50).ToList()[i - 1].MessageDate.ToShortTimeString() != logMessage.MessageDate.ToShortTimeString())
                    {
                        <span>@logMessageDateFormat(logMessage)</span>
                    }
                }

                </div>
                <div style="color:@logMessage.MessageColor;">@logMessage.MessageBody</div>
            </div>
        }


       @* @foreach (LogMessageModel logMessage in _logMessages.TakeLast(50))
        {
            <div class="d-flex flex-row justify-content-start gap-5">
                <div  class="" style="color:whitesmoke; min-width:150px;">
                    <span>@logMessageDateFormat(logMessage)</span>
                </div>
                @if (messagesIndex != 0)
                {
                        @if (_logMessages.TakeLast(50).ToList()[messagesIndex - 1].WorkoutDate.ToShortDateString() != logMessage.WorkoutDate.ToShortDateString())
                    {
                            
                    }
                    messagesIndex++;
                }
                
                else
                {
                    messagesIndex++;

                }
                
                <div style="color:@logMessage.MessageColor;" >@logMessage.MessageBody</div>
        </div>}*@

            
        
    </div>
    
</div>



@*
<img class="background" src="Images/Background.png">
<div class=" bg-dark m-auto w-75 p-4 rounded">
    <table class="table table-dark m-auto table-hover table-striped mb-5 ">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th style="cursor:pointer;" @onclick="SortTableByTotalWorkoutSessions" scope="col">Number of Workouts</th>
                <th style="cursor:pointer;" @onclick="SortTableByTotalWeightLifted" scope="col">Total weight lifted</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userAch in _usersAchievementsList)
            {
                <tr>
                    <th scope="row">@IncrementNumber()</th>
                    <td style="cursor:pointer" @onclick="(()=>NavigateToFirendProfile(userAch.UserId, userAch.UserName))">@userAch.UserName</td>
                    <td>@userAch.TotalWorkoutSessions</td>
                    <td>@userAch.TotalWeightLifted KG</td>
                </tr>

            }
        </tbody>
    </table>
        

    <div class="log">

        <div class="logHeader">
            <p class="">Workouts Log</p>
        </div>

        @foreach (LogMessageModel logMessage in _logMessages.TakeLast(50))
        {
            <div class="mb-2">
                <div>
                    <span class="logDate" style="color:whitesmoke">@logMessageDateFormat(logMessage)</span>
                    <span style="color:@logMessage.MessageColor;" class="  logElement">@logMessage.MessageBody</span>
                </div>
            </div>
        }

        
    </div>
    
</div>
*@

@code {


    string logMessageDateFormat(LogMessageModel logMessage)
    {
        string output = "";
        if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.AddDays(-1).ToShortDateString())
        {
            output = "Yesterday " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.ToShortDateString())
        {
            output = "Today " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else
        {
            output = @logMessage.MessageDate.ToString();
        }

        return output;
    }


    List<LogMessageModel> _logMessages = new();
    int counter = 0;
    int messagesIndex = 0;


    async Task UpdatedLogMessage()
    {
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _logMessages = await repo.GetAllLogMessageModels();
        }
    }
    private Timer? TextTimer;
    async Task GetLogMessages()
    {
        await UpdatedLogMessage();
        TextTimer = new Timer(async (object? stateInfo) =>
        {
            await UpdatedLogMessage();
            await InvokeAsync(StateHasChanged);  // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
        },
        null, 2000, 2000); // fire every 2000 milliseconds
    }

    protected override async Task OnInitializedAsync()
    {
        await GetLogMessages();
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            //// Get the initial list of log messages
            //_logMessages = await repo.GetAllLogMessageModels();
            

            _usersAchievementsList = await repo.GetAllUserAchievementsModel();
            _usersAchievementsList.OrderByDescending(x => x.TotalWeightLifted).ToList();
            foreach (var user in _usersAchievementsList)
            {
                await repo.UpdateUserAchievementAsync(user.UserId, user.UserName);
            }
        }
        messagesIndex = 0;

    }
    
 
    List<UserAchievementsModel> _usersAchievementsList = new();
    bool _sortAscending;
    int UserClassement = 0;


    private void SortTableByTotalWorkoutSessions()
    {
        _usersAchievementsList = _sortAscending ? _usersAchievementsList.OrderBy(x => x.TotalWorkoutSessions).ToList() : _usersAchievementsList.OrderByDescending(x => x.TotalWorkoutSessions).ToList();
        _sortAscending = !_sortAscending;
        UserClassement = 0;
    }
    private void SortTableByTotalWeightLifted()
    {
        _usersAchievementsList = _sortAscending ? _usersAchievementsList.OrderBy(x => x.TotalWeightLifted).ToList() : _usersAchievementsList.OrderByDescending(x => x.TotalWeightLifted).ToList();
        _sortAscending = !_sortAscending;
        UserClassement = 0;
    }
    private int IncrementNumber()
    {
        UserClassement++;
        return UserClassement;
    }

    private void NavigateToFirendProfile(string userId, string userName)
    {
        UriHelper.NavigateTo($"FriendProfile/{userId}/{userName}");
    }

}

