@page "/Social"
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
@using WorkoutTrackerWebsite.Pages.SocalComponents;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;
<PageTitle>Friends</PageTitle>
@layout UserLayout
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<div id="PageContainer" class=" w-100 d-flex flex-column flex-wrap  justify-content-start bg-white m-auto" style="min-height:1000px; ">

    <ul class="nav nav-tabs bg-dark fs-4 ">
        <li>
            <button @onclick="ShowPage1" class="nav-link @active1 ">Log</button>
        </li>
        <li>
            <button @onclick="ShowPage2" class="nav-link @active2">Friends</button>
        </li>
        <li>
            <button @onclick="ShowPage3" class="nav-link @active3  ">Exercises</button>
        </li>
    </ul>
    <div>
    </div>

    @if (is1Active)
    {
        <Log _logMessages="_logMessages" />
    }
    else if (is2Active)
    {
        <Friends UsersAchievementsList="_usersAchievementsList" _UserFriendsModel="_userFriendsModel" UserId="@_userId" UserName="@_userName" />
    }
    else if (is3Active)
    {
        <FriendsExercises _Allworkouts="_allWorkouts" UsersAchievementsList="_usersAchievementsList" _UserFriendsModel="_userFriendsModel" UserId="@_userId" UserName="@_userName"></FriendsExercises>
    }
    <div id="logContainer" class="bg-light d-flex flex-row justify-content-end ">
       
        



    </div>

</div>



@code {
    //NavMenu
    bool is1Active = true;
    bool is2Active = false;
    bool is3Active = false;
    int startAnimationKey = 0;
    string active1 = "active";
    string active2 = "";
    string active3 = "";

    void ShowPage1()
    {
        startAnimationKey--;
        is1Active = true;
        active1 = "active";

        is2Active = false;
        active2 = "";

        is3Active = false;
        active3 = "";
    }
    void ShowPage2()
    {
        startAnimationKey--;
        is1Active = false;
        active1 = "";

        is2Active = true;
        active2 = "active";

        is3Active = false;
        active3 = "";
    }
    void ShowPage3()
    {
        startAnimationKey--;
        is1Active = false;
        active1 = "";

        is2Active = false;
        active2 = "";

        is3Active = true;
        active3 = "active";
    }



    //User
    string _userName = "";
    string _userId = "";
    string _friendsString = "";
    List< string> _friendsList = new();

    // Log Component
    List<LogMessageModel> _logMessages = new();
    List<LogMessageModel> _newLogMessages = new();
    async Task UpdatedLogMessage()
    {
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            // Get the new list
            //TODO : Figure out why log messages doesn't show _friendsString and _friendsList works fine!
            _newLogMessages = await repo.GetLogMessageModelsByFriendsIds(_friendsList, _userId);
            // check if it changed
            if (_newLogMessages.Count != _logMessages.Count)
            {
                _logMessages = _newLogMessages;
                logMessagesChanged = true;
            }
        }
    }
    private Timer? TextTimer;
    bool logMessagesChanged;
    async Task GetLogMessages()
    {
        await UpdatedLogMessage();
        logMessagesChanged = false;
        TextTimer = new Timer(async (object? stateInfo) =>
        {
            await UpdatedLogMessage();
            if (logMessagesChanged)
            {
                await InvokeAsync(StateHasChanged);  // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
                logMessagesChanged = false;
            }
        },
        null, 2000, 2000); // fire every 2000 milliseconds
    }
    // FriendsAchievements
    List<UserAchievementsModel> _usersAchievementsList = new();
    UserFriendsModel _userFriendsModel = new();
    List<WorkoutModel> _allWorkouts = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        _userName = user.Identity.Name;
        _userId = user.Claims.FirstOrDefault().Value;

        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _userFriendsModel = await repo.GetUserFriendsModel(_userId);
            _allWorkouts = await repo.GetAllWorkoutsAsync();
            _usersAchievementsList = await repo.GetAllUserAchievementsModel();
            _usersAchievementsList.OrderByDescending(x => x.TotalWeightLifted).ToList();
            foreach (var ach in _usersAchievementsList)
            {
                await repo.UpdateUserAchievementAsync(ach.UserId, ach.UserName);
            }

        }
        _friendsString = _userFriendsModel.FriendsString;
        _friendsList = FriendsLogic.Friends_Ids_List(_friendsString);
        await GetLogMessages();
    }

}

