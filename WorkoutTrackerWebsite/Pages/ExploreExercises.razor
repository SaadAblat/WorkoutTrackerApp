@page "/AnalyseWorkouts"
@using Microsoft.AspNetCore.Identity;
@using System.Globalization;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
<PageTitle>My Workouts</PageTitle>
@layout UserLayout
<img class="background" src="Images/Background.png">


<div class="container rounded bg-light py-5 text-start">

    <div id="LinearGraph">
        <h3 class="text-start m-2">Choose Exercise To show on graph</h3>

        <div class=" m-2 fs-3 mb-4 text-start w-50">
            <RadzenCard>
                <RadzenDropDown Style="width:100%;" TValue="string" @bind-Value="_filteredExerciseName" Placeholder="Select Exercise" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@(GetExercisesInfo_That_the_user_already_trained().OrderBy(x=>x.Name))" TextProperty="Name" ValueProperty="Name" />
            </RadzenCard>
        </div>
        <div class="row">
            <div class="col-sm-12 my-5 ">

                <RadzenChart ColorScheme="ColorScheme.Divergent">
                    <RadzenLineSeries Smooth="@LineSmooth" Data="@GetAllExerciseWeightsPerDate(_filteredExerciseName)" CategoryProperty="Date" Title="Total session Weight lifted" LineType="LineType.Dashed" ValueProperty="WeightLifted">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="@LineShowDataLabels" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Weight Lifted" />
                    </RadzenValueAxis>
                </RadzenChart>
                <RadzenCard Style="display: flex; align-items: center; gap: 0.5rem;">
                    <RadzenCheckBox @bind-Value="@LineSmooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;" />
                    <RadzenCheckBox @bind-Value="@LineShowDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
            </div>
        </div>

    </div>

    <div id="PieGraph">
        <div id="WorkoutsChart1" style="min-width:400px;" class=" hoverableGetBig p-5 flex-grow-1 shadow">
            <div> This is how much you are training each muscle group </div>

            <RadzenChart Style="min-width:300px;">
                <RadzenPieSeries Data="@PopulateData()" Title="Category" CategoryProperty="Category" ValueProperty="numberOfExercises">
                    <RadzenSeriesDataLabels OffsetX="500" Visible="@pieShowDataLabels" />
                </RadzenPieSeries>
            </RadzenChart>
            <RadzenCard class="w-100 mb-4">

                <RadzenCheckBox @bind-Value="@pieShowDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenCard>
        </div>
    </div>
</div>



@code {
    string userId;
    string userName;
    UserAchievementsModel _userAchievements = new();
    List<WorkoutModel> _userWorkouts = new();
    List<ExerciseModel> _exercises = new();
    List<ExerciseCategoryModel> _categories = new();
    List<ExerciseInfos> _exercisesInfo = new();

    //Getting Data
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user.Identity.Name;
        userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _userWorkouts = await repo.GetWorkoutsByUserIdAsync(userId);
            _userAchievements = await repo.GetUserAchievementByUserId(userId);
            _exercises = await repo.GetAllExercisesAsync();
            _categories = await repo.GetAllExerciseCategories();
        }
        _exercisesInfo= ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _userWorkouts);
    }

    //Radzen Chart
    bool LineSmooth = false;
    bool LineShowDataLabels = false;

    //DATA
    class LinearDataItem
    {
        public DateTime Date { get; set; }
        public decimal WeightLifted { get; set; }
    }
    LinearDataItem[] GetAllExerciseWeightsPerDate(string exerciseName)
    {

        List < LinearDataItem > dataList = new();
        foreach(var wrk in _userWorkouts)
        {
            foreach(var round in wrk.Rounds)
            {
                if (round.ExerciseName == exerciseName)
                {
                    dataList.Add(new LinearDataItem
                        {
                            Date = wrk.Date,
                            WeightLifted = round.Sets.Sum(x => x.Weight) * round.Sets.Sum(x => x.Reps)

                });
                }
            }
        }
        // Continue this List
        LinearDataItem[] dataCollection = dataList.ToArray();


        return dataCollection;

    }


    //google Search
    async Task GoogleSearchExName(string exerciseName, string exerciseCategory)
    {
        string encodedQuery = System.Web.HttpUtility.UrlEncode("Exercise " + exerciseName + " " + exerciseCategory);
        string searchUrl = $"https://www.google.com/search?q={encodedQuery}&tbm=isch";

        await JSRuntime.InvokeAsync<object>("open", searchUrl, "_blank");

    }



    string _filteredExerciseName = "";


    //Sorting

    //Table Display
    int rowsDisplayed = 10;


    List<ExerciseInfos> GetExercisesInfo_That_the_user_already_trained()
    {
        return _exercisesInfo.Where(x => x.NumberOfSessions > 0).ToList();
    }





    //pie chart
    bool pieShowDataLabels = false;


    class PieDataItem
    {
        public string Category { get; set; }
        public int numberOfExercises { get; set; }
    }

    int GetNumberOfTime_Category_Trained(string categoryName)
    {


        List<ExerciseInfos> exercisesInfosByCategoryName = _exercisesInfo.Where(x => x.Category == categoryName).ToList();
        int numberOfTime_Category_Trained = exercisesInfosByCategoryName.Sum(x => x.NumberOfSessions);
        return numberOfTime_Category_Trained;
    }
    PieDataItem[] PopulateData()
    {
        List<PieDataItem> dataList = new();
        foreach (var categeroy in _categories)
        {
            dataList.Add(new PieDataItem
                {
                    Category = categeroy.Name,
                    numberOfExercises = GetNumberOfTime_Category_Trained(categeroy.Name)
                });
        }
        PieDataItem[] data = dataList.ToArray();

        return data;
    }
}





@*<div Class="rz-p-0 rz-p-md-12">
    <RadzenChart>
        <RadzenColumnSeries Data="@revenue" CategoryProperty="Quarter" ValueProperty="Revenue" />
        <RadzenLegend Position="LegendPosition.Bottom" />
    </RadzenChart>
</div>

@code {
    class BarDataItem
    {
        public string ExerciseName { get; set; }
        public double Volume { get; set; }
    }

    BarDataItem[] revenue = new BarDataItem[]
    {
      new BarDataItem { Quarter = "Q1", Revenue = 234000 },
      new BarDataItem { Quarter = "Q2", Revenue = 284000 },
      new BarDataItem { Quarter = "Q3", Revenue = 274000 },
      new BarDataItem { Quarter = "Q4", Revenue = 294000 }
    };
}*@


















   

