@page "/ExploreExercises"
@using Microsoft.AspNetCore.Identity;
@using System.Globalization;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
<PageTitle>My Workouts</PageTitle>
@layout UserLayout
<img class="background" src="Images/Background.png">


<div class="container rounded bg-light py-5 text-start">

    <h3 class="text-start m-2">Choose Exercise To show on graph</h3>

    <div class=" m-2 fs-3 mb-4 text-start w-50">
        <RadzenCard>
            <RadzenDropDown Style="width:100%;" TValue="string" @bind-Value="_filteredExerciseName" Placeholder="Select Exercise" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@(GetExercisesInfo_That_the_user_already_trained().OrderBy(x=>x.Name))" TextProperty="Name" ValueProperty="Name" />
        </RadzenCard>
    </div>
    <div class="row">
        <div class="col-sm-12 my-5 ">
           
            <RadzenChart ColorScheme="ColorScheme.Divergent">
                <RadzenLineSeries Smooth="@smooth" Data="@GetAllExerciseWeightsPerDate(_filteredExerciseName)" CategoryProperty="Date" Title="Total session Weight lifted" LineType="LineType.Dashed" ValueProperty="WeightLifted">
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                </RadzenLineSeries>
                <RadzenCategoryAxis Padding="20"  />
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Weight Lifted" />
                </RadzenValueAxis>
            </RadzenChart>
            <RadzenCard Style="display: flex; align-items: center; gap: 0.5rem;">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;" />
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" />
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    string userId;
    string userName;
    UserAchievementsModel _userAchievements = new();
    List<WorkoutModel> _userWorkouts = new();
    List<ExerciseModel> _exercises = new();
    List<ExerciseCategoryModel> _categories = new();
    List<ExerciseInfos> _exercisesInfo = new();

    //Getting Data
    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user.Identity.Name;
        userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _userWorkouts = await repo.GetWorkoutsByUserIdAsync(userId);
            _userAchievements = await repo.GetUserAchievementByUserId(userId);
            _exercises = await repo.GetAllExercisesAsync();
            _categories = await repo.GetAllExerciseCategories();
        }
        _exercisesInfo= ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _userWorkouts);
    }

    //Radzen Chart
    bool smooth = false;
    bool showDataLabels = false;

    //DATA
    class DataItem
    {
        public DateTime Date { get; set; }
        public decimal WeightLifted { get; set; }
    }
    DataItem[] GetAllExerciseWeightsPerDate(string exerciseName)
    {

        List < DataItem > dataList = new();
        foreach(var wrk in _userWorkouts)
        {
            foreach(var round in wrk.Rounds)
            {
                if (round.ExerciseName == exerciseName)
                {
                    dataList.Add(new DataItem
                        {
                            Date = wrk.Date,
                            WeightLifted = round.Sets.Sum(x => x.Weight) * round.Sets.Sum(x => x.Reps)

                });
                }
            }
        }
        // Continue this List
        DataItem[] dataCollection = dataList.ToArray();


        return dataCollection;

    }


    //google Search
    async Task GoogleSearchExName(string exerciseName, string exerciseCategory)
    {
        string encodedQuery = System.Web.HttpUtility.UrlEncode("Exercise " + exerciseName + " " + exerciseCategory);
        string searchUrl = $"https://www.google.com/search?q={encodedQuery}&tbm=isch";

        await JSRuntime.InvokeAsync<object>("open", searchUrl, "_blank");

    }



    string _filteredExerciseName = "";


    //Sorting

    //Table Display
    int rowsDisplayed = 10;


    List<ExerciseInfos> GetExercisesInfo_That_the_user_already_trained()
    {
        return _exercisesInfo.Where(x => x.NumberOfSessions > 0).ToList();
    }

}






@*<div class="container  text-white p-0">

    @*should make it a search bar*@
    @*<div style="max-width:1000px; " class="m-auto">
        <div class="container d-inline-flex justify-content-end">
            <div class="m-3">
                <p class="m-1 text-start">Search an exercise</p>


            </div>
            <div class="m-3 text-start">
                <p class="m-1">View by category</p>
                <select @onclick="ShowByCategory" class="form-select" id="RoundExercice" @bind="_filteredExerciseName">
                    <option value="">All</option>
                    @foreach (Models.ExerciseCategoryModel category in _categories.OrderBy(x => x.Name))
                    {
                        <option value="@category.Name">@category.Name</option>
                    }
                </select>
            </div>
            <div class="m-3">
                <p class="m-1 text-start">Display Rows</p>
                <input type="number" min="0" max="@_exercisesInfo.Count" @bind-value="rowsDisplayed" />
            </div>

        </div>




        <div class="container m-auto mb-5 p-0">
            <table class="table table-dark table-hover m-0 table-striped">
                <thead>
                    <tr>
                        <th style="cursor:pointer" @onclick="SortTableByName" scope="col"> ExerciseName</th>
                        <th style="cursor:pointer" class="pe-auto" @onclick="SortTableByCategoryName" scope="col"> ExerciseCategoy</th>
                        <th style="cursor:pointer" @onclick="SortTableByTimesTrained" scope="col">Number of sessions </th>
                        <th style="cursor:pointer" @onclick="SortTableByMaxWeight" scope="col">Max Weight</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ex in _exercisesInfo.Take(rowsDisplayed))
                    {
                        if (ex.Name != null)
                        {
                            <tr>
                                <th class="exercise" @onclick="(async ()=> await GoogleSearchExName(ex.Name, ex.Category))" scope="row">@ex.Name</th>
                                <th scope="row">@ex.Category</th>
                                <td>@ex.NumberOfSessions</td>
                                <td>@ex.MaxWeight Kg</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>







</div>*@























   

