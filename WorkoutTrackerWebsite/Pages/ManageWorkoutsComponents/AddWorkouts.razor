@page "/AddWorkouts"
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
<PageTitle>AddWorkout</PageTitle>
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;

@inject AuthenticationStateProvider GetAuthenticationStateAsync



<div  class="container bg-white text-dark m-auto p-0 rounded-3 AddWorkoutContainer text-start ">
    <div>
        <div class="m-auto ">
            <div class="bg-dark rounded mb-4">
                <h1 class="text-light text-center fs-1 p-3">Add a new workout</h1>
            </div>
            <div class="shadow fs-3 m-auto text-center w-100">

                <RadzenCard>
                    <div class="fs-5">Load workout exercises from your workout templates</div>
                    <div class="m-auto ">
                        <RadzenDropDown Style=" min-width:400px; max-width:600px;" TValue="Guid" @bind-Value="_templateId" Placeholder="Select template" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@(_workoutsTemplates.OrderBy(x=>x.Name))" TextProperty="Name" ValueProperty="Id" />
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="LoadWorkoutTemplate">Load Template</RadzenButton>
                    </div>


                </RadzenCard>
            </div>
            <div class="  w-100 ">
                <div id="DateAndNote" class=" my-4 d-flex flex-row flex-wrap justify-content-evenly gap-1">
                    <div id="Date" style="min-width:400px" class="shadow flex-grow-1">
                        <div style="height:60px;" class=" text-center p-2 bg-dark text-light rounded fs-3  w-100 fw-bold mb-3">Set workout's date</div>
                        <input style="max-width:400px;" type="date" class=" mt-5 form-control form-control-sm border-3 m-auto text-center fs-5 mb-4  " id="WorkoutDate" @bind-value="Workout.Date" />
                    </div>
                    <div id="Note" style="min-width:400px" class="shadow flex-grow-1">
                        <div style="height:60px;" class=" p-2 bg-dark rounded text-light fs-3 text-center m-auto w-100 fw-bold mb-3">Workout Note</div>
                        <div class="m-auto p-3 w-100">
                            <textarea style="height:150px" placeholder="Add a Note" class=" form-control shadow" @bind="Workout.Note" />
                        </div>
                    </div>



                </div>

                <div id="Rounds" class="shadow w-100 m-auto text-center justify-content-center  d-flex flex-row flex-wrap">
                    <div style="max-height:60px;" class=" p-2 ps-3 bg-dark rounded text-light text-center fs-3 w-100 fw-bold mb-3">Workout Rounds</div>

                    @if (Workout.Rounds != null)
                    {
                        @foreach (Models.RoundModel round in Workout.Rounds)
                        {
                            
                            <Animation AnimationHappensOnce="true"  AnimationNameSelect="@AnimationsNames.fadeDown">
                            <div class="shadow  border-3  border-secondary rounded-3 m-1 p-3  ">
                                
                                <span @onclick="@(() => DeleteRound(round))" class="closeX oi oi-x text-end "></span>
                                <span class=" text-start roundNumber ">#@round.RoundNumber</span>
                                <div for="RoundExercice" class="text-start fs-5 fw-bold  " style="max-width:300px;">@round.ExerciseName </div>
                                <div>
                                    <div class="fs-3 mb-4 text-start w-100">
                                        <RadzenCard>
                                            <RadzenDropDown Style="width:100%;" TValue="string" @bind-Value="round.ExerciseName" Placeholder="Select Exercise" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@(_exercises.OrderBy(x=>x.Name))" TextProperty="Name" ValueProperty="Name" />
                                        </RadzenCard>
                                    </div>
                                </div>
                                    <div>


                                        <table class="table shadow table-bordered rounded  ">
                                            <thead>
                                                <tr>
                                                    <th class="fs-6" style="min-width:50px;" scope="col">Set</th>
                                                    <th class="fs-6" style="min-width:50px;" scope="col">Weight</th>
                                                    <th class="fs-6" style="min-width:50px;" scope="col">Reps</th>
                                                    <th class="fs-6" style="min-width:50px;" scope="col"></th>

                                                </tr>
                                            </thead>
                                            <tbody>


                                                @if (round.Sets != null)
                                                {
                                                    foreach (Models.SetModel set in round.Sets)
                                                    {


                                                        <tr>
                                                            <th class="fs-6" scope="row">#@set.SetNumber</th>
                                                            <td><input type="number" min="0" id="SetWeight" class=" fs-6 text-center m-auto   fw-bold text-black" style="max-width:80px; min-height:30px;" @bind-value="set.Weight" /> Kg</td>
                                                            <td class="fs-6 "><input type="number" min="1" id="SetReps" class="fs-6 text-center m-auto   fw-bold text-black" style="max-width:80px; min-height:30px;" @bind-value="set.Reps" /> Rep</td>
                                                            <td> <span @onclick="@(() => DeleteSet(round, set))" class="oi oi-x m-auto deleteOi"></span></td>
                                                        </tr>
                                                    }
                                                }
                                                <tr>
                                                    <th @onclick="@(() => AddSet(round))" colspan="4" class="w-100 addSet">
                                                        <span class="oi oi-plus  me-3 text-center "></span>
                                                    </th>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                               
                            </div>
                            </Animation>
                            

                        }
                    }
                    <div class="m-1 p-3 d-flex flex-column flex-wrap justify-content-center px-5 m-3">
                        <button class="btn btn-success fs-3 " @onclick="AddRound">Add a new round</button>
                    </div>
                    <div class="w-100 d-flex flex-row flex-wrap justify-content-evenly   gap-1   mb-5 ">
                        <div id="ValidationMessage" class="w-100 my-4">
                            <div @key="@errorMessageKey" class="fs-4 validation-message shake ">@_validationErrorMessage</div>
                            <div class="text-success m-1 fs-4">@_workoutAdded</div>
                        </div>
                        <div id="Addtemplate" class="flex-grow-1 d-flex flex-column justify-content-center      border">
                            <div class=" m-auto mt-1 fs-4">Add workout as a new template</div>
                            <div class="d-flex flex-column justify-content-center ">
                                <label class="pe-2 form-label fs-5" for="templateName">Enter Template Name</label>
                                <input class=" form-control w-75 m-auto" id="templateName" type="text" @bind-value="@_workoutTemplate.Name" />
                            </div>

                            <button class="btn btn-primary m-3 fs-2" type="submit" @onclick="(()=>AddWorkoutAsATemplateAsync(_userId, _workoutTemplate.Name))"> SAVE as template</button>
                        </div>
                        <div id="AddWorkout" class="flex-grow-1 text-center border d-flex flex-column justify-content-between">

                            <div class="mt-1 fs-4">Add workout to your record</div>
                            <button class="btn btn-success m-3 fs-2" type="submit" @onclick="(()=>AddWorkoutAsync(_userId))"> SAVE WORKOUT</button>


                        </div>
                        

                    </div>
                </div>





            </div>
        </div>
    </div>
</div>












@code {


    WorkoutModel Workout = new();
    List<WorkoutModel> _workouts = new();
    int setN = 0;



    ExerciseModel Exercise = new();
    List<ExerciseModel> _exercises = new();


    List<ExerciseInfos> _exercisesInfo = new();

    string _userName = "";
    string _userId = "";


    WorkoutTemplateModel _workoutTemplate = new();

    Guid _templateId;
    WorkoutTemplateModel _choosenWorkoutTemplate = new();
    List<WorkoutTemplateModel> _workoutsTemplates = new();



    protected override async Task OnInitializedAsync()
    {

        Workout.Date = DateTime.Now;
        AddRound();
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        _userName = user.Identity.Name;
        _userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _workouts = await repo.GetWorkoutsByUserIdAsync(_userId);
            _exercises = await repo.GetAllExercisesAsync();
            _workoutsTemplates = await repo.GetWorkoutTemplatesByUserIdAsync(_userId);
        }
        _exercisesInfo = ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _workouts);

    }




    //async Task FixUserNameBug()
    //{
    //    using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
    //    {
    //        await repo.UpdateUserAchievementByUserIdAsync(_userId, _userName);
    //    }
    //}




    private void AddRound()
    {
        Models.RoundModel round = new();
        if (Workout.Rounds == null)
        {
            Workout.Rounds = new List<Models.RoundModel>();
        }
        round.RoundNumber = Workout.Rounds.Count + 1;
        Workout.Rounds.Add(round);
        AddSet(round);

    }

    private void DeleteRound(Models.RoundModel round)
    {
        if (Workout.Rounds != null)
        {
            Workout.Rounds.Remove(round);
        }
        // Reset rounds Numbers
        if (Workout.Rounds != null)
        {
            // Reset rounds Numbers
            int i = 1;
            foreach (var r in Workout.Rounds)
            {
                r.RoundNumber = i;
                i++;
            }
        }

    }

    private void AddSet(Models.RoundModel round)
    {
        Models.SetModel set = new();
        if (round.Sets == null || round.Sets.Count == 0)
        {
            round.Sets = new List<Models.SetModel>();
            set.SetNumber = 1;
            set.Reps = 1;
        }
        else
        {
            set.SetNumber = round.Sets.Count + 1;
            set.Reps = round.Sets.First(x => x.SetNumber == (set.SetNumber - 1)).Reps;
            set.Weight = round.Sets.First(x => x.SetNumber == (set.SetNumber - 1)).Weight;

        }

        round.Sets.Add(set);
    }

    private void DeleteSet(Models.RoundModel round, Models.SetModel set)
    {
        if (round.Sets != null)
        {
            round.Sets.Remove(set);
            for (int i = 0; i < round.Sets.Count; i++)
            {
                round.Sets[i].SetNumber = i + 1;
            }
        }
    }


    string _validationErrorMessage = "";
    int errorMessageKey = 0;
    void DisplayErrorMessage(string message)
    {
        errorMessageKey++;
        _validationErrorMessage = message;
    }
    string _workoutAdded = "";
    void SuccessMessage(string message)
    {
        _workoutAdded = message;
    }


    private async Task AddWorkoutAsync(string userId)
    {
        if (Workout.Rounds == null || Workout.Rounds.Count == 0)
        {
            DisplayErrorMessage("Workout has no round!");
            return;
        }
        foreach (var round in Workout.Rounds)
        {
            if (string.IsNullOrEmpty(round.ExerciseName))
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no Exercise selected!");
                return;
            }
            if (round.Sets == null || round.Sets.Count == 0)
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no sets!");
                return;
            }
        }
        DisplayErrorMessage("");
        SuccessMessage("Adding...");
        string InitialLogMessage = "";
        string workoutNote = "";
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.AddWorkout(Workout, userId);
            await repo.UpdateUserAchievementAsync(userId, _userName);
            if (Workout.Date.ToShortDateString() == DateTime.Today.ToShortDateString())
            {
                InitialLogMessage = $"{_userName} added a new Workout!";

            }
            else
            {
                InitialLogMessage = $"{_userName} added a workout on date : {Workout.Date.ToShortDateString()}";
            }

            await repo.AddLogMessageAsync(LogMessageModelLogic.GenerateLogMessage(InitialLogMessage, Workout, "yellow"));
            if (!string.IsNullOrEmpty(Workout.Note))
            {
                workoutNote = $"{_userName}: {Workout.Note}";
                await repo.AddLogMessageAsync(LogMessageModelLogic.GenerateLogMessage(workoutNote, Workout, "white"));
            }


            foreach (var round in Workout.Rounds)
            {
                decimal thisRoundMaxWeight = round.Sets.MaxBy(x => x.Weight).Weight;
                int thisRoundMaxWeightReps = round.Sets.Where(x => x.Weight == thisRoundMaxWeight).MaxBy(x => x.Reps).Reps;

                decimal maxWeightForRoundExercise = ExerciseInfoLogic.GetExerciseMaxWeightLifted(round.ExerciseName, _workouts);
                int maxWeightRepsForRoundExercise = ExerciseInfoLogic.GetExerciseMaxWeightReps(round.ExerciseName, maxWeightForRoundExercise, _workouts);


                if (thisRoundMaxWeight > maxWeightForRoundExercise)
                {
                    string msg = $"Congratulations {_userName}! You beat your previous record in the {round.ExerciseName} exercise! your new record is {thisRoundMaxWeight} Kg x {thisRoundMaxWeightReps}";
                    await repo.AddLogMessageAsync(LogMessageModelLogic.GenerateLogMessage(msg, Workout, "greenyellow"));
                }
                else if (thisRoundMaxWeight == maxWeightForRoundExercise)
                {
                    if (thisRoundMaxWeightReps > maxWeightRepsForRoundExercise)
                    {
                        string msg = $"Congratulations {_userName}! You beat your previous record in the {round.ExerciseName} exercise! You did {thisRoundMaxWeightReps} more reps than your best";
                        await repo.AddLogMessageAsync(LogMessageModelLogic.GenerateLogMessage(msg, Workout, "greenyellow"));
                    }
                }
            }
            _workouts.Add(Workout);
            SuccessMessage("Workout Added Successfully");
            ResetWorkoutModel();
        }
    }

    void ResetWorkoutModel()
    {
        Workout = new Models.WorkoutModel();
        Workout.Date = DateTime.Now;
        AddRound();
    }

    //private LogMessageModel GenerateLogMessage(string body, WorkoutModel workout, string color)
    //{
    //    LogMessageModel logMessage = new();
    //    logMessage.WorkoutDate = Workout.Date;
    //    logMessage.MessageDate = DateTime.Now;
    //    logMessage.MessageBody = body;
    //    logMessage.MessageColor = color;
    //    return logMessage;
    //}


    //Workout Template

    private async Task AddWorkoutAsATemplateAsync(string userId, string Name)
    {

        if (Workout.Rounds == null || Workout.Rounds.Count == 0)
        {
            DisplayErrorMessage("Workout Template has no round!");
            return;
        }
        foreach (var round in Workout.Rounds)
        {
            if (string.IsNullOrEmpty(round.ExerciseName))
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no Exercise selected!");
                return;
            }
            if (round.Sets == null || round.Sets.Count == 0)
            {
                DisplayErrorMessage($"Round {round.RoundNumber} has no sets!");
                return;
            }
        }
        if (string.IsNullOrEmpty(Name))
        {
            DisplayErrorMessage($"Workout Template has no Name!");
            return;

        }
        DisplayErrorMessage("");
        SuccessMessage("Adding...");

        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.AddWorkoutTemplateAsync(_workoutTemplate, Workout, Name, userId);

            SuccessMessage("Workout template Added Successfully");
        }
        _workoutsTemplates.Add(_workoutTemplate);
        _workoutTemplate = new();

    }

    async Task<WorkoutTemplateModel> GetChoosenTemplateAsync()
    {
        WorkoutTemplateModel workoutTemplate;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            workoutTemplate = await repo.GetWorkoutTemplateByIdAsync(_templateId);

        }
        return workoutTemplate;
    }


    async Task LoadWorkoutTemplate()
    {

        
        WorkoutTemplateModel templateModel = await GetChoosenTemplateAsync();
        if (templateModel != null && templateModel.Exercises != null && templateModel.Exercises.Count != 0)
        {
            Workout = new WorkoutModel();
            Workout.Date = DateTime.Now;
            Workout.Rounds = new List<RoundModel>();
            int i = 1;
            foreach (var exercise in templateModel.Exercises)
            {
                RoundModel roundModel = new RoundModel();
                roundModel.ExerciseName = exercise.Name;
                roundModel.RoundNumber = i;
                roundModel.Sets = new List<SetModel>
            {
                new SetModel
                {
                    SetNumber = 1,
                    Reps =10,
                    Weight = 0,
                }
            };
                Workout.Rounds.Add(roundModel);
                i++;
            }
        }
        
    }
}
