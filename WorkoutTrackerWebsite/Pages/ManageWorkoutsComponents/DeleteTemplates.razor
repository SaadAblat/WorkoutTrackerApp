
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
<PageTitle>AddWorkout</PageTitle>
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;
@inject IJSRuntime JSRuntime;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@layout UserLayout

<div class="container bg-white text-dark  w-100 p-0 rounded-3 " style="max-width:800px; border:solid white">
    <h1 class="bg-dark text-light text-center m-4 fs-1 p-3">Manage Workouts</h1>
    <div class="p-4">
        <table class="table table-danger table-bordered">
            <thead>
                <tr>
                    <th class="fs-4">Date</th>
                    <th class="fs-4">Exercises</th>
                    <th class="fs-4">Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var template in _workoutsTemplates)
                {
                    int i = 1;
                    <tr>
                        <td class="fw-bold">@template.Name</td>
                        <td>
                            
                            @foreach (var exercise in template.Exercises)
                            {
                                if (i == template.Exercises.Count)
                                {
                                    <span>@exercise.Name, </span>

                                }
                                else
                                {
                                    <span>@exercise.Name.</span>

                                }
                                i++;
                            }
                        </td>
                        <td class="p-1" style="cursor:pointer;" @onclick="@(() =>DeleteTemplate(template.Id))"><button class="btn btn-danger text-center w-100  ">Delete Template</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

@code {

    async Task DeleteTemplate(Guid Id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to delete this template?"))
        {
            using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
            {
                await repo.DeleteWorkoutTemplateAsyncById(Id);
            }
            if (_workoutsTemplates.Any(w => w.Id == Id))
            {
                _workoutsTemplates.Remove(_workoutsTemplates.First(w => w.Id == Id));
            }
        }
       
    }






    string _userName = "";
    string _userId = "";


    WorkoutTemplateModel _workoutTemplate = new();

    Guid _templateId;
    WorkoutTemplateModel _choosenWorkoutTemplate = new();
    List<WorkoutTemplateModel> _workoutsTemplates = new();



    protected override async Task OnInitializedAsync()
    {


        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        _userName = user.Identity.Name;
        _userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _workoutsTemplates = await repo.GetWorkoutTemplatesByUserIdAsync(_userId);
        }

    }
   
    string _validationErrorMessage = "";
    void DisplayErrorMessage(string message)
    {

        _validationErrorMessage = message;
    }
    string _workoutAdded = "";
    void SuccessMessage(string message)
    {
        _workoutAdded = message;
    }

  
}
