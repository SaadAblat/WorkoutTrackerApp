
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@using WorkoutTrackerWebsite.Models.LogicModels;
<PageTitle>AddWorkout</PageTitle>
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@layout UserLayout

<div class="mt-5 container bg-white text-dark m-auto w-100 p-0 rounded-3 mb-4 " style="max-width:800px; border:solid white">
    <h1 class="bg-dark text-light text-center fs-1 p-3">Manage Workouts</h1>
    <div class="p-4">
        <table class="table table-danger table-bordered">
            <thead>
                <tr>
                    <th class="fs-4">Date</th>
                    <th class="fs-4">Exercises</th>
                    <th class="fs-4">Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var wrk in _workouts.OrderBy(x => x.Date))
                {
                    <tr>
                        <td class="fw-bold">@wrk.Date.ToShortDateString()</td>
                        <td>
                            @foreach (var round in wrk.Rounds)
                            {
                                if (round.RoundNumber == wrk.Rounds.Count)
                                {
                                    <span> @round.ExerciseName.</span>

                                }
                                else
                                {
                                    <span> @round.ExerciseName,  </span>

                                }
                            }
                        </td>
                        <td class="p-1" style="cursor:pointer;" @onclick="@(() =>DeleteWorkout(wrk.Id))"><button class="btn btn-danger text-center w-100  ">Delete Workout</button></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>

@code {
    List<WorkoutModel> _workouts = new();

    WorkoutModel Workout = new();

    ExerciseModel Exercise = new();
    List<ExerciseModel> _exercises = new();


    List<ExerciseInfos> _exercisesInfo = new();

    string _userName = "";
    string _userId = "";


    WorkoutTemplateModel _workoutTemplate = new();

    Guid _templateId;
    WorkoutTemplateModel _choosenWorkoutTemplate = new();
    List<WorkoutTemplateModel> _workoutsTemplates = new();



    protected override async Task OnInitializedAsync()
    {


        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authstate.User;

        _userName = user.Identity.Name;
        _userId = user.Claims.FirstOrDefault().Value;
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _workouts = await repo.GetWorkoutsByUserIdAsync(_userId);
            _exercises = await repo.GetAllExercisesAsync();
            _workoutsTemplates = await repo.GetWorkoutTemplatesByUserIdAsync(_userId);
        }
        _exercisesInfo = ExerciseInfoLogic.CreateAllExercisesInfo(_exercises, _workouts);

    }
    async Task DeleteWorkout(Guid id)
    {
        if (_workouts.Any(w => w.Id == id))
        {
            _workouts.Remove(_workouts.First(w => w.Id == id));
        }
        SuccessMessage("Deleting");
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            await repo.DeleteWorkoutAsync(id);
            SuccessMessage("Deleted successfuly");

            await repo.AddLogMessageAsync(GenerateLogMessage($"{_userName} deleted a workout on date {Workout.Date.ToShortDateString()}", Workout, "red"));
        }


    }
    string _validationErrorMessage = "";
    void DisplayErrorMessage(string message)
    {

        _validationErrorMessage = message;
    }
    string _workoutAdded = "";
    void SuccessMessage(string message)
    {
        _workoutAdded = message;
    }

    private Models.LogMessageModel GenerateLogMessage(string body, Models.WorkoutModel workout, string color)
    {
        Models.LogMessageModel logMessage = new();
        logMessage.WorkoutDate = Workout.Date;
        logMessage.MessageDate = DateTime.Now;
        logMessage.MessageBody = body;
        logMessage.MessageColor = color;
        return logMessage;
    }
}
