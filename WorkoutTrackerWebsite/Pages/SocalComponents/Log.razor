@using WorkoutTrackerWebsite.Data;
@using WorkoutTrackerWebsite.Models;
@inject IJSRuntime IJsRun;

<div id="log-messages" style="height:800px; width:800px; overflow-y:scroll; overflow-x:hidden;" class="rounded bg-black p-lg-5 py-5 d-flex flex-column justify-content-start">

    @for (int i = 0; i < _logMessages.TakeLast(50).Count(); i++)
    {
        var logMessage = _logMessages.TakeLast(50).ToList()[i];
        @if (i == 0)
        {
            <div class="ms-3" style="color:whitesmoke; min-width:150px;">
                <span>@logMessageDateFormat(logMessage)</span>
            </div>
        }
        @if (IsMessageDateStringTheSameAsThePreviousOne(i, logMessage))
        {
            <div style="border-top:solid; border-top-right-radius:100%; border-top-left-radius:100%; border-top-color:dimgray; border-top-width:1px;" class="w-100  m-3"></div>
        }
        <div class="d-flex flex-row justify-content-start gap-5">
            <div class="ms-3" style="color:whitesmoke; min-width:150px;">
                @if (IsMessageDateStringTheSameAsThePreviousOne(i, logMessage))
                {
                    <span>@logMessageDateFormat(logMessage)</span>
                }
            </div>
            <div class="px-4">
                <div style="color:@logMessage.MessageColor;">@logMessage.MessageBody</div>
            </div>
        </div>
    }


</div>
@code {
    [Parameter]
    public List<LogMessageModel> _logMessages { get; set; }

    string logMessageDateFormat(LogMessageModel logMessage)
    {
        string output = "";
        if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.AddDays(-1).ToShortDateString())
        {
            output = "Yesterday " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.ToShortDateString())
        {
            output = "Today " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else
        {
            output = @logMessage.MessageDate.ToString();
        }

        return output;
    }

    bool IsMessageDateStringTheSameAsThePreviousOne(int i, LogMessageModel logMessage)
    {
        if (i != 0)
        {
            return _logMessages.TakeLast(50).ToList()[i - 1].MessageDate.ToShortTimeString() != logMessage.MessageDate.ToShortTimeString();

        }
        return false;
    }
    bool scrolledToBottom = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (_logMessages != null)
        {
            await IJsRun.InvokeVoidAsync("ScrollToBottom", "log-messages");
        }
    }






}
