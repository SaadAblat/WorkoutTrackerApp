@using WorkoutTrackerWebsite.Data;
@using WorkoutTrackerWebsite.Logic;
@using WorkoutTrackerWebsite.Models;
@inject IJSRuntime IJsRun;

<div id="log-messages" class="shadow">

    @for (int i = 0; i < _displayedLogMessages.Count(); i++)
    {
        var logMessage = _displayedLogMessages[i];
        <div class="message">

            <div class="messageDate">

                @if (i == 0)
                {
                    <span>@logMessageDateFormat(logMessage)</span>
                }
                else
                {
                    @if (!IsMessageDateStringTheSameAsThePreviousOne(i, logMessage))
                    {

                        <span>@logMessageDateFormat(logMessage)</span>
                    }
                }
                
            </div>
            <div class="messageBody">

                <div class="@logMessage.CssClass">@logMessage.MessageBody</div>
            </div>
        </div>
    }
 


</div>

@code {
    [Parameter]
    public List<LogMessageModel> _logMessages { get; set; }

    public List<LogMessageModel> _displayedLogMessages { get; set; }


    protected override async void OnParametersSet()
    {
        _logMessages = _logMessages.OrderBy(x => x.MessageDate).ToList();

        _displayedLogMessages = _logMessages.TakeLast(100).ToList();
    }



    string logMessageDateFormat(LogMessageModel logMessage)
    {
        string output = "";
        if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.AddDays(-1).ToShortDateString())
        {
            output = "Yesterday " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.ToShortDateString())
        {
            output = "Today " + @logMessage.MessageDate.ToShortTimeString() + ":";
        }
        else
        {
            output = @logMessage.MessageDate.ToShortDateString()+":";
        }

        return output;
    }

    bool IsMessageDateStringTheSameAsThePreviousOne(int i, LogMessageModel logMessage)
    {
        if (i != 0)
        {
            return _logMessages.TakeLast(100).ToList()[i - 1].MessageDate.ToShortTimeString() == logMessage.MessageDate.ToShortTimeString();

        }
        return false;
    }
    bool scrolledToBottom = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (_logMessages != null)
        {
            await IJsRun.InvokeVoidAsync("ScrollToBottom", "log-messages");
        }
    }






}
