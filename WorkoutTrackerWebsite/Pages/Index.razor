
@page "/"
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<PageTitle>Index</PageTitle>

@using WorkoutTrackerWebsite.Data


<AuthorizeView>
    <NotAuthorized>
        <div id="HomeContainer">
            <img class="background" src="Images/WorkoutPictureHome.jpg">
            <section id="WelcomSection" class="text-center">
                <h1 id="Title">Welcome</h1>
                <h1 id="Subtitle">To your workouts tracker website</h1>
                <section id="QASection" class="translate-middle-x">



                    <Animation AnimationNameSelect="@AnimationsNames.fade" AnimationDurationSet="1000" AnimationDelaySet="50" @key=@CurrentText>
                        <span id="Answer">@CurrentText</span>
                    </Animation>
                    <div class="my-5">
                        <p class="website-description m-auto text-center" style="max-width:1000px; ">Track and visualize your workouts 
                            with this web app! Create an account, log in, and add workouts with details like notes, rounds, sets, 
                            weight, and reps. Stay motivated by connecting with your friends and comparing your workout achievements.
                            
                        </p>
                    </div>

                    <button @onclick="RedirectToLogin" class="btn register">Start Now!</button>
            </section>
          



            </section>
        </div>
    </NotAuthorized>
    <Authorized>


    </Authorized>
</AuthorizeView>
    
@code{
    void RedirectToLogin()
    {
        navigationManager.NavigateTo("/Identity/Account/Register", forceLoad: true);
    } 
    List<string> AnswerTexts = new()
    {
        "Add Workouts",
        "Add Routines",
        "Track you progres",
        "Connect to your friends",
        "Stay Motivated"


    };
    string CurrentText = "";
    private Timer? TextTimer;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/UserHome", forceLoad: true);
        }
        StartCountdown();
    }

    void StartCountdown()
    {
        NextText();
        TextTimer = new Timer(async (object? stateInfo) =>
        {
            NextText();
            await InvokeAsync(StateHasChanged);  // NOTE: MUST CALL StateHasChanged() BECAUSE THIS IS TRIGGERED BY A TIMER INSTEAD OF A USER EVENT
        },
        null, 2000, 2000); // fire every 2000 milliseconds
    }
    private void NextText()
    {
        // Get the index of the current text
        int currentIndex = AnswerTexts.IndexOf(CurrentText);

        // Set the next text as the current text, wrapping around to the beginning if necessary
        CurrentText = AnswerTexts[(currentIndex + 1) % AnswerTexts.Count];

    }

    //animation


}
