@page "/Friends"
@using Microsoft.AspNetCore.Identity;
@using System.Text;
@using WorkoutTrackerWebsite.Data;
@using Microsoft.EntityFrameworkCore;
@using WorkoutTrackerWebsite.Models;
@inject IDbContextFactory<WorkoutsTrackerDbContext> ContextFactory;
<PageTitle>Friends</PageTitle>
@layout UserLayout

@inject NavigationManager UriHelper




<img class="background" src="Images/Background.png">
<div class=" bg-dark m-auto w-75 p-4 rounded">
    <table class="table table-dark m-auto table-hover table-striped mb-5 ">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th style="cursor:pointer;" @onclick="SortTableByTotalWorkoutSessions" scope="col">Number of Workouts</th>
                <th style="cursor:pointer;" @onclick="SortTableByTotalWeightLifted" scope="col">Total weight lifted</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var userAch in _usersAchievementsList)
            {
                <tr>
                    <th scope="row">@IncrementNumber()</th>
                    <td style="cursor:pointer" @onclick="(()=>NavigateToFirendProfile(userAch.UserId, userAch.UserName))">@userAch.UserName</td>
                    <td>@userAch.TotalWorkoutSessions</td>
                    <td>@userAch.TotalWeightLifted KG</td>
                </tr>

            }
        </tbody>
    </table>

        

    <div class="log">

        <div class="logHeader">
            <p class="">Workouts Log</p>
        </div>

        @foreach (LogMessageModel logMessage in _logMessages.TakeLast(50))
        {
            <div class="mb-2">
                @if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.AddDays(-1).ToShortDateString())
                {
                <div><span class="logDate " style="color:whitesmoke">Yesterday  @logMessage.MessageDate.ToShortTimeString() : </span> <span style="color:@logMessage.MessageColor;" class="  logElement">@logMessage.MessageBody</span>  </div>

                }
                else if (logMessage.MessageDate.ToShortDateString() == DateTime.Today.ToShortDateString())
                {
                <div><span class="logDate" style="color:whitesmoke">Today  @logMessage.MessageDate.ToShortTimeString() : </span> <span style="color:@logMessage.MessageColor;" class="  logElement">@logMessage.MessageBody</span>  </div>



                }
                else
                {
                <div><span class="logDate" style="color:whitesmoke">@logMessage.MessageDate : </span> <span style="color:@logMessage.MessageColor;" class="  logElement">@logMessage.MessageBody</span>  </div>

                }
            </div>    
        }

        
    </div>
    
</div>


@code {
    List<LogMessageModel> _logMessages = new();
    int counter = 0;



    protected override async Task OnInitializedAsync()
    {
        using (var repo = new WorkoutRepository(ContextFactory.CreateDbContext()))
        {
            _logMessages = await repo.GetAllLogMessageModels();
            _usersAchievementsList = await repo.GetAllUserAchievementsModel();
            _usersAchievementsList.OrderByDescending(x => x.TotalWeightLifted).ToList();
            foreach (var user in _usersAchievementsList)
            {
                await repo.UpdateUserAchievementAsync(user.UserId, user.UserName);
            }
        }
    }
    List<UserAchievementsModel> _usersAchievementsList = new();
    bool _sortAscending;
    int UserClassement = 0;


    private void SortTableByTotalWorkoutSessions()
    {
        _usersAchievementsList = _sortAscending ? _usersAchievementsList.OrderBy(x => x.TotalWorkoutSessions).ToList() : _usersAchievementsList.OrderByDescending(x => x.TotalWorkoutSessions).ToList();
        _sortAscending = !_sortAscending;
        UserClassement = 0;
    }
    private void SortTableByTotalWeightLifted()
    {
        _usersAchievementsList = _sortAscending ? _usersAchievementsList.OrderBy(x => x.TotalWeightLifted).ToList() : _usersAchievementsList.OrderByDescending(x => x.TotalWeightLifted).ToList();
        _sortAscending = !_sortAscending;
        UserClassement = 0;
    }
    private int IncrementNumber()
    {
        UserClassement++;
        return UserClassement;
    }

    private void NavigateToFirendProfile(string userId, string userName)
    {
        UriHelper.NavigateTo($"FriendProfile/{userId}/{userName}");
    }

}

